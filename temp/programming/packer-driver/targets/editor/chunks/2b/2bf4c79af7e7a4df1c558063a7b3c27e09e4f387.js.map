{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","SudokuCreator","ccclass","property","GameController","selectedNode","onLoad","createPuzzleBoard","sudokuCreator","childMatrixWidth","boardData","createSudoku","solution","puzzleGame","solutionGame","i","puzzle","length","push","console","log","j","value","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","string","toString","on","EventType","TOUCH_END","getComponent","rowIndex","Math","floor","position","y","colIndex","x","parseInt","solutionValue","label","color","GREEN","RED","nodeNum","verticalAlign","CENTER","parent","node","numberLabels","BLACK"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(Node)\r\n    boardNode: Node;\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n    private selectedNode: Node = null;\r\n\r\n\r\n    onLoad() {\r\n        this.createPuzzleBoard();\r\n    }\r\n\r\n    \r\n\r\n    createPuzzleBoard(){\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(0.2);\r\n        let solution = boardData.solution;\r\n        let puzzleGame: number[] = [];\r\n        let solutionGame: number[] = [];\r\n        \r\n        \r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        console.log(puzzleGame);\r\n        console.log(solutionGame);\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"-\" : value.toString();\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    this.selectedNode = nodeSudoku;\r\n\r\n                    const labelBlock = this.selectedNode.getComponent(Label);\r\n                    const rowIndex = Math.floor(this.selectedNode.position.y / 55);\r\n                    const colIndex = Math.floor(this.selectedNode.position.x / 55);\r\n                    const value = parseInt(labelBlock.string);\r\n\r\n                    if (value === 0) {\r\n                        const solutionValue = solutionGame[rowIndex * 9 + colIndex];\r\n\r\n                        if (solutionValue === parseInt(label.string)) {\r\n                            labelBlock.color = Color.GREEN;\r\n                        } else {\r\n                            labelBlock.color = Color.RED;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const label = nodeNum.addComponent(Label);\r\n            label.string = `${i + 1}`;\r\n            label.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -110, 0);\r\n            this.numberLabels.push(label);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                console.log(`Value ${label.string}`);\r\n            });\r\n\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const labelBlock = this.selectedNode.getComponent(Label);\r\n                    labelBlock.string = label.string;\r\n                    labelBlock.color = Color.BLACK;\r\n                }\r\n            });\r\n        }\r\n\r\n        // for (let i = 0; i < 9; i++) {\r\n        //     const nodeNum = new Node(\"NumberValueLabel\");\r\n        //     const label = nodeNum.addComponent(Label);\r\n        //     label.string = `${i + 1}`;\r\n        //     label.verticalAlign = VerticalTextAlignment.CENTER;\r\n        //     nodeNum.parent = this.node;\r\n        //     nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -110, 0);\r\n        //     this.numberLabels.push(label);\r\n        //     nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n        //         console.log(`Value ${label.string}`);\r\n        //     });\r\n\r\n        //     nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n        //         if (this.selectedNode) {\r\n        //             const labelBlock = this.selectedNode.getComponent(Label);\r\n        //             labelBlock.string = label.string;\r\n        //             labelBlock.color = Color.BLACK;\r\n        //         }\r\n        //     });\r\n        // }\r\n\r\n    }   \r\n}\r\n\r\n"]}