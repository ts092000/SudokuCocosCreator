{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Button","director","SudokuCreator","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","onLoad","levelPanel","active","console","log","rePlayGame","loadScene","displayLevelPanel","easyLevelGame","createPuzzleBoard","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","j","value","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","string","toString","previousNode","previousLabel","on","EventType","TOUCH_END","nodeNum","label","verticalAlign","CENTER","parent","node","position","Math","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","solutionValue","isCorrect","getComponent","color","RED","playerFault","gameOver","BLUE"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, SpriteFrame, Button, director } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    private selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;    \r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n    }\r\n    createPuzzleBoard(){\r\n        //this.playerFault.color = Color.RED;\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n\r\n                // nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                //     this.selectedNode = nodeSudoku;\r\n                //     labelBlock.string = \"-\";\r\n                // });\r\n                let previousNode = null;\r\n                let previousLabel = null;\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    // Kiểm tra nếu có node được chọn trước đó\r\n                    if (previousNode && previousLabel) {\r\n                        // Cập nhật label của node trước đó thành \"0\"\r\n                        previousLabel.string = \"0\";\r\n                    }\r\n                    // Thiết lập node và label mới được chọn\r\n                    this.selectedNode = nodeSudoku;\r\n                    labelBlock.string = \"-\";\r\n                    // Cập nhật giá trị của node và label trước đó\r\n                    previousNode = nodeSudoku;\r\n                    previousLabel = labelBlock;\r\n                });\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const label = nodeNum.addComponent(Label);\r\n            label.string = ` ${i + 1} `;\r\n            label.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n            this.numberLabels.push(label);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const selectedValue = parseInt(label.string);\r\n                    if (!isNaN(selectedValue)) {\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const solutionValue = this.solutionGame[position];\r\n                        const isCorrect = selectedValue === solutionValue;\r\n                        console.log(isCorrect);\r\n\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            this.redNumber++;\r\n                            this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            this.playerFault.node.active = true;\r\n                            if (this.redNumber === 4) {\r\n                                console.log(\"thua rồi nhé !!!\")\r\n                                this.gameOver.active = true;\r\n                                this.playerFault.string = `Lỗi 3/3`\r\n                            }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n    }   \r\n}\r\n\r\n"]}