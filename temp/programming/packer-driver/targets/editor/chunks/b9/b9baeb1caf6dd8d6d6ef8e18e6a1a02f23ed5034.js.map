{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","Prefab","instantiate","SudokuCreator","GameView","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","timeBestArr","timeBestArr1","timeBestArr2","volumeBg","volumeEffect","start","bestscore","localStorage","getItem","JSON","parse","bestTime","string","Math","min","bestscore1","bestscore2","saveVolumeBg","bgMain","getComponent","volume","length","settingVolumeBg","progress","console","log","saveVolumeEffect","settingVolumeEffect","onLoad","levelPanel","active","startGamePlayer","gameView","StartGame","volumeStart","play","updateTimer","timerLabel","volumeGameSetting","progressBg","push","setItem","stringify","displayVolumeSetting","settingNode","pause","volumeGameEffect","volumeLose","getVolume","setVolume","volumeWinGame","volumeSelectNode","progressEffect","rePlayGame","continueGame","resume","displayLevelPanel","update","bestTimeLevle","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","newGame","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","solution","emtyNode","nodeCheck","j","filled","value","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","color","BLACK","nodeState","on","EventType","TOUCH_END","prevSelectedNode","name","prefabInstance","frameNode","position","parent","row","floor","x","getChildByName","nodePrefab","removeAllChildren","col","y","rowStart","colStart","nodeNum","labelValue","verticalAlign","CENTER","numberLabels","selectedValue","parseInt","isNaN","solutionValue","isCorrect","labelBlockSelect","BLUE","winGame","RED","playerFault","gameOver"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider, Prefab, instantiate, Vec2} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    // @property(Node)\r\n    // startGame: Node;\r\n    \r\n    @property(GameView)\r\n    gameView: GameView;\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Node)\r\n    boardEffectNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    @property(Button)\r\n    newGame: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n\r\n    @property(AudioClip)\r\n    volumeStart: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeWinGame: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Button)\r\n    settingVolumeAll: Slider;\r\n\r\n    @property(Node)\r\n    settingNode: Node;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Slider)\r\n    settingVolumeEffect: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Node)\r\n    winGame: Node;\r\n\r\n    @property(Label)\r\n    bestTime: Label;\r\n\r\n    @property(Label)\r\n    bestTimeLevle: Label;\r\n\r\n    @property(Prefab)\r\n    frameNode: Prefab;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    timeBestArr: number[] = [];\r\n    timeBestArr1: number[] = [];\r\n    timeBestArr2: number[] = [];\r\n    volumeBg: number[] = [];\r\n    volumeEffect: number[] = [];\r\n    start() {\r\n            let bestscore=localStorage.getItem('bestTime'); \r\n            if(bestscore){\r\n                this.timeBestArr=JSON.parse(bestscore);\r\n                this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr))\r\n            }\r\n            let bestscore1=localStorage.getItem('bestTime1');\r\n            if(bestscore1){\r\n                this.timeBestArr1=JSON.parse(bestscore1);\r\n                this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1))\r\n            }\r\n            let bestscore2=localStorage.getItem('bestTime2');\r\n            if(bestscore2){\r\n                this.timeBestArr2=JSON.parse(bestscore2);\r\n                this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2))\r\n            }\r\n\r\n            let saveVolumeBg = localStorage.getItem('volumeBg');\r\n            if(saveVolumeBg){\r\n                this.volumeBg=JSON.parse(saveVolumeBg);\r\n                this.bgMain.getComponent(AudioSource).volume = this.volumeBg[this.volumeBg.length - 1];\r\n                this.settingVolumeBg.progress = this.volumeBg[this.volumeBg.length - 1];\r\n            }\r\n            console.log(this.settingVolumeBg.progress)\r\n\r\n            let saveVolumeEffect = localStorage.getItem('volumeEffect');\r\n            if(saveVolumeEffect){\r\n                this.volumeEffect=JSON.parse(saveVolumeEffect);\r\n                this.settingVolumeEffect.progress= this.volumeEffect[this.volumeEffect.length - 1];\r\n            }\r\n    }\r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    startGamePlayer(){\r\n        this.gameView.StartGame.active = false;\r\n        this.volumeStart.play();\r\n    }\r\n    updateTimer() {\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){    \r\n        this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n        const progressBg = this.settingVolumeBg.progress;\r\n        this.volumeBg.push(progressBg);\r\n        localStorage.setItem('volumeBg', JSON.stringify(this.volumeBg));\r\n    }\r\n    displayVolumeSetting(){\r\n        this.settingNode.active = true;\r\n        director.pause();\r\n    }\r\n    volumeGameEffect(){\r\n        this.volumeLose.getVolume();\r\n        this.volumeLose.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeWinGame.getVolume();\r\n        this.volumeWinGame.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeSelectNode.getVolume();\r\n        this.volumeSelectNode.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeStart.getVolume();\r\n        this.volumeStart.setVolume(this.settingVolumeEffect.progress);\r\n\r\n        const progressEffect = this.settingVolumeEffect.progress;\r\n        this.volumeEffect.push(progressEffect);\r\n        localStorage.setItem('volumeEffect', JSON.stringify(this.volumeEffect));\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    continueGame(){\r\n        director.resume();\r\n        this.settingNode.active = false;\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    update(){\r\n        if(this.difficultyLevel == 0.1){\r\n            this.bestTimeLevle.string = 'Độ Khó: DỄ'\r\n            this.bestTime.string = 'Thời gian nhanh nhất : ' +(Math.min(...this.timeBestArr));\r\n        } else if(this.difficultyLevel == 0.2){\r\n            this.bestTimeLevle.string = 'Độ Khó: TRUNG BÌNH'\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1));\r\n        } else if(this.difficultyLevel == 0.3){\r\n            this.bestTimeLevle.string = 'Độ Khó: KHÓ'\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2));\r\n\r\n        }\r\n    }\r\n\r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n        this.newGame.node.active = true;\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n        this.newGame.node.active = true;\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n        this.newGame.node.active = true;\r\n    }\r\n\r\n        // // Get row and column index of a node based on its position on the screen\r\n        // getRowAndColumn(node) {\r\n        //     let x = node.position.x - this.boardNode.position.x;\r\n        //     let y = node.position.y - this.boardNode.position.y;\r\n        //     let row = Math.floor(y / 55);\r\n        //     let column = Math.floor(x / 55);\r\n        //     return { row, column };\r\n        // }\r\n    \r\n        // // Get nodes in the same row as the given node\r\n        // getNodesInRow(node) {\r\n        //     let { row } = this.getRowAndColumn(node);\r\n        //     let nodes = [];\r\n        //     for (let i = 0; i < 9; i++) {\r\n        //         if (i !== row) {\r\n        //             nodes.push(this.boardNode.getChildByName(`ValueGame${i*9+node.column}`));\r\n        //         }\r\n        //     }\r\n        //     return nodes;\r\n        // }\r\n    \r\n        // // Get nodes in the same column as the given node\r\n        // getNodesInColumn(node) {\r\n        //     let { column } = this.getRowAndColumn(node);\r\n        //     let nodes = [];\r\n        //     for (let i = 0; i < 9; i++) {\r\n        //         if (i !== column) {\r\n        //             nodes.push(this.boardNode.getChildByName(`ValueGame${node.row*9+i}`));\r\n        //         }\r\n        //     }\r\n        //     return nodes;\r\n        // }\r\n    \r\n        // // Get nodes in the same 3x3 grid as the given node\r\n        // getNodesInGrid(node) {\r\n        //     let { row, column } = this.getRowAndColumn(node);\r\n        //     let nodes = [];\r\n        //     let gridRow = Math.floor(row / 3) * 3;\r\n        //     let gridColumn = Math.floor(column / 3) * 3;\r\n        //     for (let i = gridRow; i < gridRow + 3; i++) {\r\n        //         for (let j = gridColumn; j < gridColumn + 3; j++) {\r\n        //             if (i !== row || j !== column) {\r\n        //                 nodes.push(this.boardNode.getChildByName(`ValueGame${i*9+j}`));\r\n        //             }\r\n        //         }\r\n        //     }\r\n        //     return nodes;\r\n        // }\r\n    \r\n\r\n    createPuzzleBoard(){\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        let emtyNode = 0;\r\n        const nodeCheck = [];\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            nodeCheck.push([]);\r\n            for (let j = 0; j < 9; j++) {\r\n                nodeCheck[i].push({ filled: false });\r\n                let value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(`ValueGame${i*9+j}`);\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n\r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n                labelBlock.color = Color.BLACK;\r\n\r\n                if (value === 0) {\r\n                    emtyNode++;\r\n                }\r\n\r\n                // const nodeState = {};\r\n                // nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                //     if (value === 0) {\r\n                //         this.selectedNode = nodeSudoku;\r\n                //         if (!nodeState[nodeSudoku.name]) {\r\n                //             nodeState[nodeSudoku.name] = true;\r\n                //             const prefabInstance = instantiate(this.frameNode);\r\n                //             prefabInstance.setPosition(nodeSudoku.position);\r\n                //             nodeSudoku.parent.addChild(prefabInstance);\r\n                //         }\r\n                //     }\r\n                // });\r\n                const nodeState = {};\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    if (value === 0) {\r\n\r\n                        const prevSelectedNode = this.selectedNode;\r\n                        // if (prevSelectedNode) {\r\n                        //     prevSelectedNode.parent.removeAllChildren();\r\n                        // }   \r\n\r\n                        this.selectedNode = nodeSudoku;\r\n                        if (!nodeState[nodeSudoku.name]) {\r\n                            nodeState[nodeSudoku.name] = true;\r\n                \r\n                            // Instantiate the prefab\r\n                            const prefabInstance = instantiate(this.frameNode);\r\n                            prefabInstance.setPosition(nodeSudoku.position);\r\n                            nodeSudoku.parent.addChild(prefabInstance);\r\n                \r\n                            // Show the prefab on the same row\r\n                            const row = Math.floor(nodeSudoku.position.x / 55);\r\n                            for (let i = 0; i < 9; i++) {\r\n                                if (i !== row) {\r\n                                    const node = this.boardNode.getChildByName(`ValueGame${i*9 + j}`);\r\n                                    const nodePrefab = instantiate(this.frameNode);\r\n                                    nodePrefab.setPosition(node.position);\r\n                                    node.parent.addChild(nodePrefab);\r\n\r\n                                    if (prevSelectedNode) {\r\n                                        prevSelectedNode.parent.removeAllChildren();\r\n                                    }   \r\n                                }\r\n                            }\r\n                \r\n                            // Show the prefab on the same column\r\n                            const col = Math.floor(nodeSudoku.position.y / 55);\r\n                            for (let j = 0; j < 9; j++) {\r\n                                if (j !== col) {\r\n                                    const node = this.boardNode.getChildByName(`ValueGame${i*9 + j}`);\r\n                                    const nodePrefab = instantiate(this.frameNode);\r\n                                    nodePrefab.setPosition(node.position);\r\n                                    node.parent.addChild(nodePrefab);\r\n                                }\r\n                            }\r\n                \r\n                            // Show the prefab on the same 3x3 grid\r\n                            const rowStart = Math.floor(row / 3) * 3;\r\n                            const colStart = Math.floor(col / 3) * 3;\r\n                            for (let i = rowStart; i < rowStart + 3; i++) {\r\n                                for (let j = colStart; j < colStart + 3; j++) {\r\n                                    if (i !== row && j !== col) {\r\n                                        const node = this.boardNode.getChildByName(`ValueGame${i*9 + j}`);\r\n                                        const nodePrefab = instantiate(this.frameNode);\r\n                                        nodePrefab.setPosition(node.position);\r\n                                        node.parent.addChild(nodePrefab);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                \r\n\r\n                const nodeNum = new Node(\"NumberValueLabel\");\r\n                const labelValue = nodeNum.addComponent(Label);\r\n                labelValue.string = `  ${i + 1}  `;\r\n                labelValue.color = Color.BLACK;\r\n\r\n                labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n                nodeNum.parent = this.node;\r\n                nodeNum.position = new Vec3(i % 3 * 70 + 210, Math.floor(i / 3) * -60, 0);\r\n                this.numberLabels.push(labelValue);\r\n                nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                    if (this.selectedNode) {\r\n                        const selectedValue = parseInt(labelValue.string);\r\n                        if (!isNaN(selectedValue)) {\r\n                            this.volumeSelectNode.play();\r\n                            const i = Math.floor(this.selectedNode.position.x / 55);\r\n                            const j = Math.floor(this.selectedNode.position.y / 55);\r\n                            const position = i * 9 + j;\r\n                            const solutionValue = this.solutionGame[position];\r\n                            const isCorrect = selectedValue === solutionValue;\r\n                            console.log(isCorrect);\r\n                        \r\n                            const labelBlockSelect = this.selectedNode.getComponent(Label);\r\n\r\n                            if (!nodeCheck[i][j].filled) {\r\n                                if (isCorrect) {\r\n                                    labelBlockSelect.color = Color.BLUE;\r\n                                    emtyNode--;\r\n                                    nodeCheck[i][j].filled = true;\r\n                                    console.log(emtyNode);\r\n                                \r\n                                    if (emtyNode === 0){\r\n                                        console.log(\"winner\");\r\n                                        this.volumeWinGame.play();\r\n                                        this.bgMain.getComponent(AudioSource).pause();      \r\n                                        if(this.difficultyLevel == 0.1){\r\n                                            this.timeBestArr.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                                        }\r\n                                        if(this.difficultyLevel == 0.2){\r\n                                            this.timeBestArr1.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                                        }   \r\n                                        if(this.difficultyLevel == 0.3){\r\n                                            this.timeBestArr2.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                                        }\r\n                                        this.winGame.active = true;                   \r\n                                    }         \r\n                                } else {\r\n                                    labelBlockSelect.color = Color.RED;\r\n                                    this.redNumber++;\r\n                                    this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                                    this.playerFault.node.active = true;\r\n                                    if (this.redNumber == 4) {\r\n                                        console.log(\"thua rồi nhé !!!\");\r\n                                        this.gameOver.active = true;\r\n                                        this.playerFault.string = `Lỗi 3/3`;\r\n                                        this.volumeLose.play();\r\n                                        this.bgMain.getComponent(AudioSource).pause();      \r\n                                    }\r\n                                    if(this.redNumber == 5){\r\n                                        this.redNumber--;\r\n                                        this.playerFault.string = `Lỗi 3/3`; \r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            labelBlockSelect.string = selectedValue.toString();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n    // if (!isNaN(selectedValue)) {\r\n                    //     this.volumeSelectNode.play();\r\n                    //     const i = Math.floor(this.selectedNode.position.x / 55);\r\n                    //     const j = Math.floor(this.selectedNode.position.y / 55);\r\n                    //     const position = i * 9 + j;\r\n                    //     const rowStart = Math.floor(i / 3) * 3;\r\n                    //     const colStart = Math.floor(j / 3) * 3;\r\n                    //     let isCorrect = true;\r\n                    \r\n                    //     // Check row\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== j && selectedValue === this.puzzleGame[i*9 + k]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check column\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== i && selectedValue === this.puzzleGame[k*9 + j]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check 3x3\r\n                    //     for (let row = 0; row < 3; row++) {\r\n                    //         for (let col = 0; col < 3; col++) {\r\n                    //             const r = rowStart + row;\r\n                    //             const c = colStart + col;\r\n                    //             if ((r !== i || c !== j) && selectedValue === this.puzzleGame[r*9 + c]) {\r\n                    //                 isCorrect = false;\r\n                    //                 break;\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     console.log(isCorrect);\r\n                    \r\n                    //     const labelBlock = this.selectedNode.getComponent(Label);\r\n                    //     if (!isCorrect) {\r\n                    //         labelBlock.color = Color.RED;\r\n                    //         this.redNumber++;\r\n                    //         this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                    //         this.playerFault.node.active = true;\r\n                    //         if (this.redNumber === 4) {\r\n                    //             console.log(\"thua rồi nhé !!!\");\r\n                    //             this.gameOver.active = true;\r\n                    //             this.playerFault.string = `Lỗi 3/3`;\r\n                    //             this.volumeLose.play();\r\n                    //         }\r\n                    //         emtyNode++;\r\n                    //     } else {\r\n                    //         labelBlock.color = Color.BLUE;\r\n                    //         emtyNode--;\r\n                    //         console.log(emtyNode);\r\n                    //         if (emtyNode === 0){\r\n                    //             console.log(\"winner\");\r\n                    //             this.timeBestArr.push(this.timeElapsed);\r\n                    //             localStorage.setItem('scores', JSON.stringify(this.timeBestArr));\r\n                    //             let bestTime = Math.max(...this.timeBestArr);\r\n                    //             console.log(bestTime);\r\n                    //         }                        }\r\n                    //     labelBlock.string = selectedValue.toString();\r\n\r\n                    // }\r\n\r\n\r\n\r\n     // if (!isCorrect) {\r\n                            //     labelBlockSelect.color = Color.RED;\r\n                            //     this.redNumber++;\r\n                            //     this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            //     this.playerFault.node.active = true;\r\n                            //     if (this.redNumber == 4) {\r\n                            //         console.log(\"thua rồi nhé !!!\");\r\n                            //         this.gameOver.active = true;\r\n                            //         this.playerFault.string = `Lỗi 3/3`;\r\n                            //         this.volumeLose.play();             \r\n                            //     }\r\n                            // } else {\r\n                            //     labelBlockSelect.color = Color.BLUE;\r\n                            //     emtyNode -= 1;\r\n                            //     console.log(emtyNode);\r\n                                \r\n                            //     if (emtyNode === 0){\r\n                            //         console.log(\"winner\");\r\n                            //         this.volumeWinGame.play();\r\n                            //         if(this.difficultyLevel == 0.1){\r\n                            //             this.timeBestArr.push(this.timeElapsed);\r\n                            //             localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                            //         }\r\n                            //         if(this.difficultyLevel == 0.2){\r\n                            //             this.timeBestArr1.push(this.timeElapsed);\r\n                            //             localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                            //         }   \r\n                            //         if(this.difficultyLevel == 0.3){\r\n                            //             this.timeBestArr2.push(this.timeElapsed);\r\n                            //             localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                            //         }\r\n                            //         this.winGame.active = true;                   \r\n                            //     }                      \r\n                            // }\r\n\r\n\r\n"]}