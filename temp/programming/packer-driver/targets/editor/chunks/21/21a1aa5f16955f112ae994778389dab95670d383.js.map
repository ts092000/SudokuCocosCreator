{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","Prefab","instantiate","SudokuCreator","GameView","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","timeBestArr","timeBestArr1","timeBestArr2","volumeBg","start","saveVolume","localStorage","getItem","JSON","parse","settingVolumeBg","progress","length","bestscore","bestTime","string","Math","min","bestscore1","bestscore2","savedValue","value","parseFloat","onLoad","levelPanel","active","console","log","startGamePlayer","gameView","StartGame","volumeStart","play","updateTimer","timerLabel","volumeGameSetting","progressBg","bgMain","getComponent","volume","push","setItem","stringify","displayVolumeSetting","settingNode","pause","volumeGameEffect","volumeLose","getVolume","setVolume","settingVolumeEffect","volumeWinGame","volumeSelectNode","rePlayGame","continueGame","resume","displayLevelPanel","update","bestTimeLevle","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","solution","emtyNode","nodeCheck","j","filled","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","color","BLACK","nodeState","on","EventType","TOUCH_END","name","prefabInstance","frameNode","position","parent","nodeNum","labelValue","verticalAlign","CENTER","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","solutionValue","isCorrect","labelBlockSelect","BLUE","winGame","RED","playerFault","gameOver"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider, Prefab, instantiate} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    // @property(Node)\r\n    // startGame: Node;\r\n    \r\n    @property(GameView)\r\n    gameView: GameView;\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Node)\r\n    boardEffectNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n\r\n    @property(AudioClip)\r\n    volumeStart: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeWinGame: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Button)\r\n    settingVolumeAll: Slider;\r\n\r\n    @property(Node)\r\n    settingNode: Node;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Slider)\r\n    settingVolumeEffect: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Node)\r\n    winGame: Node;\r\n\r\n    @property(Label)\r\n    bestTime: Label;\r\n\r\n    @property(Label)\r\n    bestTimeLevle: Label;\r\n\r\n    @property(Prefab)\r\n    frameNode: Prefab;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    timeBestArr: number[] = [];\r\n    timeBestArr1: number[] = [];\r\n    timeBestArr2: number[] = [];\r\n    volumeBg: number[] = [];\r\n    start() {\r\n            let saveVolume = localStorage.getItem('volumeBg');\r\n\r\n            if(saveVolume){\r\n                this.volumeBg=JSON.parse(saveVolume);\r\n                this.settingVolumeBg.progress= this.volumeBg[this.volumeBg.length - 1];\r\n            }\r\n\r\n            let bestscore=localStorage.getItem('bestTime'); \r\n            if(bestscore){\r\n                this.timeBestArr=JSON.parse(bestscore);\r\n                this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr))\r\n            }\r\n            let bestscore1=localStorage.getItem('bestTime1');\r\n            if(bestscore1){\r\n                this.timeBestArr1=JSON.parse(bestscore1);\r\n                this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1))\r\n            }\r\n            let bestscore2=localStorage.getItem('bestTime2');\r\n            if(bestscore2){\r\n                this.timeBestArr2=JSON.parse(bestscore2);\r\n                this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2))\r\n            }\r\n\r\n            const savedValue = localStorage.getItem('sliderValue');\r\n            if (savedValue !== null) {\r\n                this.settingVolumeBg.value = parseFloat(savedValue);\r\n            }\r\n    }\r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    startGamePlayer(){\r\n        this.gameView.StartGame.active = false;\r\n        this.volumeStart.play();\r\n    }\r\n    updateTimer() {\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){\r\n        const progressBg = this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n        this.volumeBg.push(progressBg);\r\n        localStorage.setItem('volumeBg', JSON.stringify(this.volumeBg));\r\n    }\r\n    displayVolumeSetting(){\r\n        this.settingNode.active = true;\r\n        director.pause();\r\n    }\r\n    volumeGameEffect(){\r\n        this.volumeLose.getVolume();\r\n        this.volumeLose.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeWinGame.getVolume();\r\n        this.volumeWinGame.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeSelectNode.getVolume();\r\n        this.volumeSelectNode.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeStart.getVolume();\r\n        this.volumeStart.setVolume(this.settingVolumeEffect.progress);\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    continueGame(){\r\n        director.resume();\r\n        this.settingNode.active = false;\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    update(){\r\n        if(this.difficultyLevel == 0.1){\r\n            this.bestTimeLevle.string = 'Độ Khó: DỄ'\r\n            this.bestTime.string = 'Thời gian nhanh nhất : ' +(Math.min(...this.timeBestArr));\r\n        } else if(this.difficultyLevel == 0.2){\r\n            this.bestTimeLevle.string = 'Độ Khó: TRUNG BÌNH'\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1));\r\n        } else if(this.difficultyLevel == 0.3){\r\n            this.bestTimeLevle.string = 'Độ Khó: KHÓ'\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2));\r\n\r\n        }\r\n    }\r\n\r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n    }\r\n    createPuzzleBoard(){\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        let emtyNode = 0;\r\n        const nodeCheck = [];\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            nodeCheck.push([]);\r\n            for (let j = 0; j < 9; j++) {\r\n                nodeCheck[i].push({ filled: false });\r\n                let value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n\r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n                labelBlock.color = Color.BLACK;\r\n\r\n                if (value === 0) {\r\n                    emtyNode++;\r\n                }\r\n\r\n                const nodeState = {};\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    if (value === 0) {\r\n                        this.selectedNode = nodeSudoku;\r\n                        if (!nodeState[nodeSudoku.name]) {\r\n                            nodeState[nodeSudoku.name] = true;\r\n                            const prefabInstance = instantiate(this.frameNode);\r\n                            prefabInstance.setPosition(nodeSudoku.position);\r\n                            nodeSudoku.parent.addChild(prefabInstance);\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const nodeNum = new Node(\"NumberValueLabel\");\r\n                const labelValue = nodeNum.addComponent(Label);\r\n                labelValue.string = `  ${i + 1}  `;\r\n                labelValue.color = Color.BLACK;\r\n\r\n                labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n                nodeNum.parent = this.node;\r\n                nodeNum.position = new Vec3(i % 3 * 70 + 210, Math.floor(i / 3) * -60, 0);\r\n                this.numberLabels.push(labelValue);\r\n                nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                    if (this.selectedNode) {\r\n                        const selectedValue = parseInt(labelValue.string);\r\n                        if (!isNaN(selectedValue)) {\r\n                            this.volumeSelectNode.play();\r\n                            const i = Math.floor(this.selectedNode.position.x / 55);\r\n                            const j = Math.floor(this.selectedNode.position.y / 55);\r\n                            const position = i * 9 + j;\r\n                            const solutionValue = this.solutionGame[position];\r\n                            const isCorrect = selectedValue === solutionValue;\r\n                            console.log(isCorrect);\r\n                        \r\n                            const labelBlockSelect = this.selectedNode.getComponent(Label);\r\n\r\n                            if (!nodeCheck[i][j].filled) {\r\n                                if (isCorrect) {\r\n                                    labelBlockSelect.color = Color.BLUE;\r\n                                    emtyNode--;\r\n                                    nodeCheck[i][j].filled = true;\r\n                                    console.log(emtyNode);\r\n                                \r\n                                    if (emtyNode === 0){\r\n                                        console.log(\"winner\");\r\n                                        this.volumeWinGame.play();\r\n                                        if(this.difficultyLevel == 0.1){\r\n                                            this.timeBestArr.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                                        }\r\n                                        if(this.difficultyLevel == 0.2){\r\n                                            this.timeBestArr1.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                                        }   \r\n                                        if(this.difficultyLevel == 0.3){\r\n                                            this.timeBestArr2.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                                        }\r\n                                        this.winGame.active = true;                   \r\n                                    }         \r\n                                } else {\r\n                                    labelBlockSelect.color = Color.RED;\r\n                                    this.redNumber++;\r\n                                    this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                                    this.playerFault.node.active = true;\r\n                                    if (this.redNumber == 4) {\r\n                                        console.log(\"thua rồi nhé !!!\");\r\n                                        this.gameOver.active = true;\r\n                                        this.playerFault.string = `Lỗi 3/3`;\r\n                                        this.volumeLose.play();       \r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            labelBlockSelect.string = selectedValue.toString();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n    // if (!isNaN(selectedValue)) {\r\n                    //     this.volumeSelectNode.play();\r\n                    //     const i = Math.floor(this.selectedNode.position.x / 55);\r\n                    //     const j = Math.floor(this.selectedNode.position.y / 55);\r\n                    //     const position = i * 9 + j;\r\n                    //     const rowStart = Math.floor(i / 3) * 3;\r\n                    //     const colStart = Math.floor(j / 3) * 3;\r\n                    //     let isCorrect = true;\r\n                    \r\n                    //     // Check row\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== j && selectedValue === this.puzzleGame[i*9 + k]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check column\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== i && selectedValue === this.puzzleGame[k*9 + j]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check 3x3\r\n                    //     for (let row = 0; row < 3; row++) {\r\n                    //         for (let col = 0; col < 3; col++) {\r\n                    //             const r = rowStart + row;\r\n                    //             const c = colStart + col;\r\n                    //             if ((r !== i || c !== j) && selectedValue === this.puzzleGame[r*9 + c]) {\r\n                    //                 isCorrect = false;\r\n                    //                 break;\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     console.log(isCorrect);\r\n                    \r\n                    //     const labelBlock = this.selectedNode.getComponent(Label);\r\n                    //     if (!isCorrect) {\r\n                    //         labelBlock.color = Color.RED;\r\n                    //         this.redNumber++;\r\n                    //         this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                    //         this.playerFault.node.active = true;\r\n                    //         if (this.redNumber === 4) {\r\n                    //             console.log(\"thua rồi nhé !!!\");\r\n                    //             this.gameOver.active = true;\r\n                    //             this.playerFault.string = `Lỗi 3/3`;\r\n                    //             this.volumeLose.play();\r\n                    //         }\r\n                    //         emtyNode++;\r\n                    //     } else {\r\n                    //         labelBlock.color = Color.BLUE;\r\n                    //         emtyNode--;\r\n                    //         console.log(emtyNode);\r\n                    //         if (emtyNode === 0){\r\n                    //             console.log(\"winner\");\r\n                    //             this.timeBestArr.push(this.timeElapsed);\r\n                    //             localStorage.setItem('scores', JSON.stringify(this.timeBestArr));\r\n                    //             let bestTime = Math.max(...this.timeBestArr);\r\n                    //             console.log(bestTime);\r\n                    //         }                        }\r\n                    //     labelBlock.string = selectedValue.toString();\r\n\r\n                    // }\r\n\r\n\r\n\r\n     // if (!isCorrect) {\r\n                            //     labelBlockSelect.color = Color.RED;\r\n                            //     this.redNumber++;\r\n                            //     this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            //     this.playerFault.node.active = true;\r\n                            //     if (this.redNumber == 4) {\r\n                            //         console.log(\"thua rồi nhé !!!\");\r\n                            //         this.gameOver.active = true;\r\n                            //         this.playerFault.string = `Lỗi 3/3`;\r\n                            //         this.volumeLose.play();             \r\n                            //     }\r\n                            // } else {\r\n                            //     labelBlockSelect.color = Color.BLUE;\r\n                            //     emtyNode -= 1;\r\n                            //     console.log(emtyNode);\r\n                                \r\n                            //     if (emtyNode === 0){\r\n                            //         console.log(\"winner\");\r\n                            //         this.volumeWinGame.play();\r\n                            //         if(this.difficultyLevel == 0.1){\r\n                            //             this.timeBestArr.push(this.timeElapsed);\r\n                            //             localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                            //         }\r\n                            //         if(this.difficultyLevel == 0.2){\r\n                            //             this.timeBestArr1.push(this.timeElapsed);\r\n                            //             localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                            //         }   \r\n                            //         if(this.difficultyLevel == 0.3){\r\n                            //             this.timeBestArr2.push(this.timeElapsed);\r\n                            //             localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                            //         }\r\n                            //         this.winGame.active = true;                   \r\n                            //     }                      \r\n                            // }\r\n\r\n\r\n"]}