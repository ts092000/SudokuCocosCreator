{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameView.ts"],"names":["_decorator","Component","Node","ccclass","property","GameView","StartGame","startGame","GameStart","v"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;;;;;;;;OAC1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;0BAGjBK,Q,WADZF,OAAO,CAAC,UAAD,C,UAEHC,QAAQ,CAACF,IAAD,C,2BAFb,MACaG,QADb,SAC8BJ,SAD9B,CACwC;AAAA;AAAA;;AAAA;AAAA;;AAGhB,YAATK,SAAS,GAAE;AAClB,iBAAO,KAAKC,SAAZ;AACH;;AACmB,YAATC,SAAS,CAACC,CAAD,EAAS;AACzB,eAAKF,SAAL,GAAiBE,CAAjB;AACH;;AARmC,O;;;;;kCAYxC;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, Node, Label, Button } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameView')\r\nexport class GameView extends Component {\r\n    @property(Node)\r\n    private startGame: Node;\r\n    public get StartGame(){\r\n        return this.startGame;\r\n    }\r\n    public set GameStart(v: Node){\r\n        this.startGame = v;\r\n    }\r\n}\r\n\r\n\r\n// import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider } from 'cc';\r\n// const { ccclass, property } = _decorator;\r\n// import { SudokuCreator } from '@algorithm.ts/sudoku';\r\n// import { GameView } from './GameView';\r\n\r\n// @ccclass('GameController')\r\n// export class GameController extends Component {\r\n\r\n//     // @property(Node)\r\n//     // startGame: Node;\r\n    \r\n//     @property(GameView)\r\n//     gameView: GameView;\r\n//     @property(Node)\r\n//     boardNode: Node;\r\n\r\n//     @property(Label)\r\n//     numberLabels: Label[] = [];\r\n\r\n//     @property(Node)\r\n//     gameOver: Node;\r\n\r\n//     @property(Node)\r\n//     levelPanel: Node;\r\n\r\n//     @property(Button)\r\n//     rePlay: Button;\r\n\r\n//     //LevelPanel\r\n//     @property(Button)\r\n//     easyLevel: Button;\r\n\r\n//     @property(Button)\r\n//     mediumLevel: Button;\r\n\r\n//     @property(Button)\r\n//     hardLevel: Button;\r\n\r\n//     @property(Label)\r\n//     playerFault: Label;\r\n\r\n//     @property(Sprite)\r\n//     bgNodeValue: Sprite;\r\n    \r\n//     //Audio Game\r\n\r\n//     @property(AudioClip)\r\n//     volumeStart: AudioClip;\r\n\r\n//     @property(AudioClip)\r\n//     volumeSelectNode: AudioClip;\r\n\r\n//     @property(AudioClip)\r\n//     volumeLose: AudioClip;\r\n\r\n//     @property(AudioClip)\r\n//     volumeWinGame: AudioClip;\r\n\r\n//     @property(Sprite)\r\n//     bgMain: Sprite;\r\n\r\n//     @property(Button)\r\n//     settingVolumeAll: Slider;\r\n\r\n//     @property(Node)\r\n//     settingNode: Node;\r\n\r\n//     @property(Slider)\r\n//     settingVolumeBg: Slider;\r\n\r\n//     @property(Slider)\r\n//     settingVolumeEffect: Slider;\r\n\r\n//     @property(Label)\r\n//     timerLabel: Label = null;\r\n\r\n//     @property(Label)\r\n//     levelLabel: Label = null;\r\n\r\n//     @property(Node)\r\n//     winGame: Node;\r\n\r\n//     @property(Label)\r\n//     bestTime: Label;\r\n\r\n//     selectedNode: Node = null;\r\n//     puzzleGame: number[] = [];\r\n//     solutionGame: number[] = [];\r\n//     redNumber: number = 0;\r\n//     difficultyLevel: number;\r\n//     timeElapsed: number = 0; \r\n//     timeBestArr: number[] = [];    \r\n//     start() {\r\n//         let bestscore=localStorage.getItem('bestTime');\r\n//         if(bestscore){\r\n//            this.timeBestArr=JSON.parse(bestscore);\r\n//            this.bestTime.string='bestTime: ' +(Math.min(...this.timeBestArr))\r\n//         }\r\n//     }\r\n//     onLoad() {\r\n//         this.levelPanel.active = true;\r\n//         //this.createPuzzleBoard();\r\n//         console.log(this.puzzleGame)\r\n//         console.log(this.solutionGame)\r\n//     }\r\n//     startGamePlayer(){\r\n//         this.gameView.StartGame.active = false;\r\n//         this.volumeStart.play();\r\n//     }\r\n//     updateTimer() {\r\n//         this.timeElapsed++;\r\n//         // this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n//     }\r\n//     volumeGameSetting(){\r\n//         this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n//     }\r\n//     displayVolumeSetting(){\r\n//         this.settingNode.active = true;\r\n//         director.pause();\r\n//     }\r\n//     volumeGameEffect(){\r\n//         this.volumeLose.getVolume();\r\n//         this.volumeLose.setVolume(this.settingVolumeEffect.progress);\r\n//         this.volumeWinGame.getVolume();\r\n//         this.volumeWinGame.setVolume(this.settingVolumeEffect.progress);\r\n//         this.volumeSelectNode.getVolume();\r\n//         this.volumeSelectNode.setVolume(this.settingVolumeEffect.progress);\r\n//     }\r\n//     rePlayGame(){\r\n//         director.loadScene(\"MainGame\");\r\n//     }\r\n//     continueGame(){\r\n//         director.resume();\r\n//         this.settingNode.active = false;\r\n//     }\r\n//     displayLevelPanel(){\r\n//         this.levelPanel.active = true;\r\n//     }\r\n    \r\n//     //levelFunction\r\n//     easyLevelGame() {\r\n//         this.difficultyLevel = 0.1;\r\n//         this.createPuzzleBoard();\r\n//         this.levelPanel.active = false;\r\n//         this.bgNodeValue.node.active = true;\r\n//         this.schedule(this.updateTimer, 1);\r\n//         this.levelLabel.string = \"Độ khó : DỄ\"\r\n\r\n//     }\r\n//     mediumLevelGame() {\r\n//         this.difficultyLevel = 0.2;\r\n//         this.createPuzzleBoard();\r\n//         this.levelPanel.active = false;\r\n//         this.bgNodeValue.node.active = true;\r\n//         this.schedule(this.updateTimer, 1);\r\n//         this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n\r\n//     }\r\n//     hardLevelGame() {\r\n//         this.difficultyLevel = 0.3;\r\n//         this.createPuzzleBoard();\r\n//         this.levelPanel.active = false;\r\n//         this.bgNodeValue.node.active = true;\r\n//         this.schedule(this.updateTimer, 1); \r\n//         this.levelLabel.string = \"Độ khó : KHÓ\"\r\n//     }\r\n//     createPuzzleBoard(){\r\n\r\n//         let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n//         let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n//         for (let i = 0; i < boardData.puzzle.length; i++) {\r\n//             this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n//         }\r\n//         for (let i = 0; i < boardData.solution.length; i++) {\r\n//             this.solutionGame.push(boardData.solution[i] + 1);\r\n//         }\r\n\r\n//         let emtyNode = 0;\r\n//         for (let i = 0; i < 9; i++) {\r\n//             for (let j = 0; j < 9; j++) {\r\n\r\n//                 const value = this.puzzleGame[i*9 + j];\r\n//                 const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n//                 nodeSudoku.setPosition(i * 55, j * 55);\r\n//                 this.boardNode.addChild(nodeSudoku);\r\n                \r\n//                 const labelBlock = nodeSudoku.addComponent(Label);\r\n//                 labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n//                 labelBlock.color = Color.BLACK;\r\n\r\n//                 if (value === 0) {\r\n//                     emtyNode++;\r\n//                 }\r\n\r\n//                 nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n//                     if (value === 0) {\r\n//                       this.selectedNode = nodeSudoku;\r\n//                       labelBlock.string = \"-\";\r\n//                     }\r\n//                 });\r\n\r\n\r\n//             }\r\n//             const nodeNum = new Node(\"NumberValueLabel\");\r\n//             const labelValue = nodeNum.addComponent(Label);\r\n//             labelValue.string = `  ${i + 1}  `;\r\n//             labelValue.color = Color.BLACK;\r\n\r\n//             labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n//             nodeNum.parent = this.node;\r\n//             nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n//             this.numberLabels.push(labelValue);\r\n//             nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n//                 if (this.selectedNode) {\r\n//                     const selectedValue = parseInt(labelValue.string);\r\n//                     if (!isNaN(selectedValue)) {\r\n//                         this.volumeSelectNode.play();\r\n//                         const i = Math.floor(this.selectedNode.position.x / 55);\r\n//                         const j = Math.floor(this.selectedNode.position.y / 55);\r\n//                         const position = i * 9 + j;\r\n//                         const solutionValue = this.solutionGame[position];\r\n//                         const isCorrect = selectedValue === solutionValue;\r\n//                         console.log(isCorrect);\r\n\r\n//                         const labelBlock = this.selectedNode.getComponent(Label);\r\n\r\n//                         if (!isCorrect) {\r\n//                             labelBlock.color = Color.RED;\r\n//                             this.redNumber++;\r\n//                             this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n//                             this.playerFault.node.active = true;\r\n//                             if (this.redNumber === 4) {\r\n//                                 console.log(\"thua rồi nhé !!!\");\r\n//                                 this.gameOver.active = true;\r\n//                                 this.playerFault.string = `Lỗi 3/3`;\r\n//                                 this.volumeLose.play();\r\n//                                 this.timeBestArr.push(this.timeElapsed);\r\n//                                 localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n//                                 this.winGame.active = true;  \r\n//                             }\r\n//                         } else {\r\n//                             labelBlock.color = Color.BLUE;\r\n//                             emtyNode -= 1;\r\n//                             console.log(emtyNode);\r\n//                             if (emtyNode === 0){\r\n//                                 console.log(\"winner\");\r\n//                                 this.volumeWinGame.play();                            \r\n//                             }                      \r\n//                         }\r\n//                         labelBlock.string = selectedValue.toString();\r\n//                     }\r\n//                 }\r\n//             });\r\n//         }\r\n//     }   \r\n// }\r\n\r\n"]}