{"version":3,"sources":["file:///C:/Users/ADMIN/OneDrive/M%C3%A1y%20t%C3%ADnh/SudokuMain2/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Prefab","instantiate","SudokuCreator","GameView","GameClient","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","timeBestArr","timeBestArr1","timeBestArr2","volumeBg","volumeEffect","gameClient","matchId","currentPos","start","console","log","undefined","initAsync","then","catch","err","match","startMatch","data","error","bestscore","localStorage","getItem","JSON","parse","bestTime","string","Math","min","bestscore1","bestscore2","onLoad","levelPanel","active","updateTimer","timerLabel","rePlayGame","displayLevelPanel","update","bestTimeLevle","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","newGame","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","emtyNode","nodeCheck","j","filled","value","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","color","BLACK","nodeState","on","EventType","TOUCH_END","name","prefabInstance","frameNodeNum","position","parent","row","floor","x","getChildByName","nodePrefab","frameNode","setTimeout","destroy","col","y","rowStart","colStart","nodeNum","labelValue","verticalAlign","CENTER","numberLabels","selectedValue","parseInt","isNaN","volumeSelectNode","play","solutionValue","isCorrect","labelBlockSelect","getComponent","BLUE","volumeWinGame","bgMain","pause","setItem","stringify","winGame","completeMatch","score","RED","playerFault","gameOver","volumeLose"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider, Prefab, instantiate, Vec2} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\nimport GameClient from '@dattenlagiday/oc_gamecenter_sdk_pkg';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    // @property(Node)\r\n    // startGame: Node;\r\n    \r\n    @property(GameView)\r\n    gameView: GameView;\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Node)\r\n    boardEffectNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    @property(Button)\r\n    newGame: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n\r\n    @property(AudioClip)\r\n    volumeStart: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeWinGame: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Node)\r\n    winGame: Node;\r\n\r\n    @property(Label)\r\n    bestTime: Label;\r\n\r\n    @property(Label)\r\n    bestTimeLevle: Label;\r\n\r\n    @property(Prefab)\r\n    frameNode: Prefab;\r\n\r\n    @property(Prefab)\r\n    frameNodeNum: Prefab;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    timeBestArr: number[] = [];\r\n    timeBestArr1: number[] = [];\r\n    timeBestArr2: number[] = [];\r\n    volumeBg: number[] = [];\r\n    volumeEffect: number[] = [];\r\n\r\n    public gameClient;\r\n    matchId:string\r\n\r\n    public async start():Promise<void> {\r\n        console.log(this.gameClient);\r\n        if(this.gameClient === undefined)\r\n        {\r\n            this.gameClient = new GameClient(\"643fce940a3bf613239132bc\",\"057e6bb4-e80d-40f2-ae0a-2940ac94ee15\");\r\n            await this.gameClient.initAsync()\r\n                .then(() => {})\r\n                .catch((err) => console.log(err));\r\n        }\r\n            \r\n        await this.gameClient.match\r\n            .startMatch()\r\n            .then((data) => {this.matchId=data.matchId})\r\n            .catch((error) => console.log(error));\r\n\r\n        let bestscore=localStorage.getItem('bestTime'); \r\n        if(bestscore){\r\n            this.timeBestArr=JSON.parse(bestscore);\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr))\r\n        }\r\n\r\n        let bestscore1=localStorage.getItem('bestTime1');\r\n        if(bestscore1){\r\n            this.timeBestArr1=JSON.parse(bestscore1);\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1))\r\n        }\r\n\r\n        let bestscore2=localStorage.getItem('bestTime2');\r\n        if(bestscore2){\r\n            this.timeBestArr2=JSON.parse(bestscore2);\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2))\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n\r\n    updateTimer() {\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    update(){\r\n        if(this.difficultyLevel == 0.2){\r\n            this.bestTimeLevle.string = 'Độ Khó: DỄ'\r\n            this.bestTime.string = 'Thời gian nhanh nhất : ' +(Math.min(...this.timeBestArr));\r\n        } else if(this.difficultyLevel == 0.5){\r\n            this.bestTimeLevle.string = 'Độ Khó: TRUNG BÌNH'\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1));\r\n        } else if(this.difficultyLevel == 0.8){\r\n            this.bestTimeLevle.string = 'Độ Khó: KHÓ'\r\n            this.bestTime.string = 'Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2));\r\n        }\r\n    }\r\n\r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n        this.newGame.node.active = true;\r\n    }\r\n\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.5;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n        this.newGame.node.active = true;\r\n    }\r\n\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.8;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n        this.newGame.node.active = true;\r\n    }\r\n\r\n    currentPos: Vec2 = null;\r\n    createPuzzleBoard(){\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        let emtyNode = 0;\r\n        const nodeCheck = [];\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            nodeCheck.push([]);\r\n            for (let j = 0; j < 9; j++) {\r\n                nodeCheck[i].push({ filled: false });\r\n                let value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(`ValueGame${i*9+j}`);\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n\r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n                labelBlock.color = Color.BLACK;\r\n\r\n                if (value === 0) {\r\n                    emtyNode++;\r\n                }\r\n\r\n                const nodeState = {};\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    if (value === 0) {\r\n                        this.selectedNode = nodeSudoku;\r\n                        if (!nodeState[nodeSudoku.name]) {\r\n                            nodeState[nodeSudoku.name] = true;\r\n                \r\n                            //Instantiate the prefab\r\n                            const prefabInstance = instantiate(this.frameNodeNum);\r\n                            prefabInstance.setPosition(nodeSudoku.position);\r\n                            nodeSudoku.parent.addChild(prefabInstance);\r\n                \r\n                            const row = Math.floor(nodeSudoku.position.x / 55);\r\n                            for (let i = 0; i < 9; i++) {\r\n                                if (i !== row) {\r\n                                    const node = this.boardNode.getChildByName(`ValueGame${i*9 + j}`);\r\n                                    const nodePrefab = instantiate(this.frameNode);\r\n                                    nodePrefab.setPosition(node.position);\r\n                                    node.parent.addChild(nodePrefab);\r\n\r\n                                    setTimeout(() => {\r\n                                        nodePrefab.destroy();\r\n                                    }, 1000);\r\n                                }\r\n                            }\r\n                \r\n                            const col = Math.floor(nodeSudoku.position.y / 55);\r\n                            for (let j = 0; j < 9; j++) {\r\n                                if (j !== col) {\r\n                                    const node = this.boardNode.getChildByName(`ValueGame${i*9 + j}`);\r\n                                    const nodePrefab = instantiate(this.frameNode);\r\n                                    nodePrefab.setPosition(node.position);\r\n                                    node.parent.addChild(nodePrefab);\r\n\r\n                                    setTimeout(() => {\r\n                                        nodePrefab.destroy();\r\n                                    }, 1000);\r\n                                }\r\n                            }\r\n                \r\n                            const rowStart = Math.floor(row / 3) * 3;\r\n                            const colStart = Math.floor(col / 3) * 3;\r\n                            for (let i = rowStart; i < rowStart + 3; i++) {\r\n                                for (let j = colStart; j < colStart + 3; j++) {\r\n                                    if (i !== row && j !== col) {\r\n                                        const node = this.boardNode.getChildByName(`ValueGame${i*9 + j}`);\r\n                                        const nodePrefab = instantiate(this.frameNode);\r\n                                        nodePrefab.setPosition(node.position);\r\n                                        node.parent.addChild(nodePrefab);\r\n\r\n                                        setTimeout(() => {\r\n                                            nodePrefab.destroy();\r\n                                        }, 1000);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                const nodeNum = new Node(\"NumberValueLabel\");\r\n                const labelValue = nodeNum.addComponent(Label);\r\n                labelValue.string = `  ${i + 1}  `;\r\n                labelValue.color = Color.BLACK;\r\n\r\n                labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n                nodeNum.parent = this.bgNodeValue.node;\r\n                nodeNum.position = new Vec3(i % 3 * 70 + 210, Math.floor(i / 3) * -60, 0);\r\n                this.numberLabels.push(labelValue);\r\n                nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                    if (this.selectedNode) {\r\n                        const selectedValue = parseInt(labelValue.string);\r\n                        if (!isNaN(selectedValue)) {\r\n                            this.volumeSelectNode.play();\r\n                            const i = Math.floor(this.selectedNode.position.x / 55);\r\n                            const j = Math.floor(this.selectedNode.position.y / 55);\r\n                            const position = i * 9 + j;\r\n                            const solutionValue = this.solutionGame[position];\r\n                            const isCorrect = selectedValue === solutionValue;\r\n                            console.log(isCorrect);\r\n                        \r\n                            const labelBlockSelect = this.selectedNode.getComponent(Label);\r\n\r\n                            if (!nodeCheck[i][j].filled) {\r\n                                if (isCorrect) {\r\n                                    labelBlockSelect.color = Color.BLUE;\r\n                                    emtyNode--;\r\n                                    nodeCheck[i][j].filled = true;\r\n                                    console.log(emtyNode);\r\n                                \r\n                                    if (emtyNode === 0){\r\n                                        console.log(\"winner\");\r\n                                        this.volumeWinGame.play();\r\n                                        this.bgMain.getComponent(AudioSource).pause();      \r\n                                        if(this.difficultyLevel == 0.1){\r\n                                            this.timeBestArr.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                                        }\r\n                                        if(this.difficultyLevel == 0.2){\r\n                                            this.timeBestArr1.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                                        }   \r\n                                        if(this.difficultyLevel == 0.3){\r\n                                            this.timeBestArr2.push(this.timeElapsed);\r\n                                            localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                                        }\r\n                                        this.winGame.active = true;\r\n\r\n                                        this.gameClient.match\r\n                                        .completeMatch(this.matchId, { score:this.timeElapsed})\r\n                                        .then((data) => {})\r\n                                        .catch((error) => console.log(error));                   \r\n                                    }         \r\n                                } else {\r\n                                    labelBlockSelect.color = Color.RED;\r\n                                    this.redNumber++;\r\n                                    this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                                    this.playerFault.node.active = true;\r\n                                    if (this.redNumber == 4) {\r\n                                        console.log(\"thua rồi nhé !!!\");\r\n                                        this.gameOver.active = true;\r\n                                        this.playerFault.string = `Lỗi 3/3`;\r\n                                        this.volumeLose.play();\r\n                                        this.bgMain.getComponent(AudioSource).pause();\r\n                                        \r\n                                        \r\n                                        this.gameClient.match\r\n                                        .completeMatch(this.matchId, { score:this.timeElapsed})\r\n                                        .then((data) => {})\r\n                                        .catch((error) => console.log(error));\r\n                                    }\r\n                                    if(this.redNumber == 5){\r\n                                        this.redNumber--;\r\n                                        this.playerFault.string = `Lỗi 3/3`; \r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            labelBlockSelect.string = selectedValue.toString();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\n\r\n"]}