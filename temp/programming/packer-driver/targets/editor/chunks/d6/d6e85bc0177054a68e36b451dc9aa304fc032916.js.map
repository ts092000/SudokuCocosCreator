{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","SudokuCreator","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","onLoad","createPuzzleBoard","sudokuCreator","childMatrixWidth","boardData","createSudoku","solution","i","puzzle","length","push","console","log","j","value","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","string","toString","on","EventType","TOUCH_END","nodeNum","label","verticalAlign","CENTER","parent","node","position","Math","floor","numberLabels","solutionValue","getComponent"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(Node)\r\n    boardNode: Node;\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n    private selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n\r\n\r\n    onLoad() {\r\n        this.createPuzzleBoard();\r\n    }\r\n\r\n    \r\n\r\n    createPuzzleBoard(){\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(0.2);\r\n        let solution = boardData.solution;\r\n        // let puzzleGame: number[] = [];\r\n        // let solutionGame: number[] = [];\r\n        \r\n        \r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        console.log(this.puzzleGame);\r\n        console.log(this.solutionGame);\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"-\" : value.toString();\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    this.selectedNode = nodeSudoku;\r\n                });\r\n\r\n                const nodeNum = new Node(\"NumberValueLabel\");\r\n                const label = nodeNum.addComponent(Label);\r\n                label.string = `${i + 1}`;\r\n                label.verticalAlign = VerticalTextAlignment.CENTER;\r\n                nodeNum.parent = this.node;\r\n                nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -110, 0);\r\n                this.numberLabels.push(label);\r\n                nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                    console.log(`Value ${label.string}`);\r\n                });\r\n\r\n                nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                    if (this.selectedNode) {\r\n                        const solutionValue = this.solutionGame[i*9 + j];\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n                        labelBlock.string = label.string;\r\n                        // labelBlock.color = Color.BLACK;\r\n                        console.log(solutionValue);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\n"]}