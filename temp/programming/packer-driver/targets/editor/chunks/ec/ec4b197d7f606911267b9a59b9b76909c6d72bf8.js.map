{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","SudokuCreator","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","onLoad","levelPanel","active","console","log","updateTimer","timerLabel","string","volumeGameSetting","bgMain","getComponent","volume","settingVolumeBg","progress","rePlayGame","displayLevelPanel","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","mediumLevelGame","hardLevelGame","beginGame","checkConflict","value","row","column","puzzle","i","j","rowStart","Math","floor","colStart","sudokuCreator","childMatrixWidth","boardData","createSudoku","length","push","solution","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","on","EventType","TOUCH_END","nodeNum","label","verticalAlign","CENTER","parent","position","numberLabels","selectedValue","parseInt","isNaN","volumeSelectNode","play","x","y","solutionValue","isCorrect","color","RED","playerFault","gameOver","volumeLose","BLUE"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    \r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    updateTimer() {\r\n        // Tăng số giây đã trôi qua và cập nhật đối tượng Label\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){\r\n        this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n    }\r\n    beginGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    checkConflict(value: number, row: number, column: number): boolean {\r\n        const puzzle = this.puzzleGame;\r\n        // Kiểm tra xem giá trị đã được chọn có trùng với các giá trị trong cùng hàng\r\n        for (let i = 0; i < 9; i++) {\r\n            if (puzzle[row * 9 + i] === value) {\r\n                return true;\r\n            }\r\n        }\r\n        // Kiểm tra xem giá trị đã được chọn có trùng với các giá trị trong cùng cột\r\n        for (let j = 0; j < 9; j++) {\r\n            if (puzzle[j * 9 + column] === value) {\r\n                return true;\r\n            }\r\n        }\r\n        // Kiểm tra xem giá trị đã được chọn có trùng với các giá trị trong cùng lưới 3x3\r\n        const rowStart = Math.floor(row / 3) * 3;\r\n        const colStart = Math.floor(column / 3) * 3;\r\n        for (let i = rowStart; i < rowStart + 3; i++) {\r\n            for (let j = colStart; j < colStart + 3; j++) {\r\n                if (puzzle[i * 9 + j] === value) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    createPuzzleBoard(){\r\n        //this.playerFault.color = Color.RED;\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    this.selectedNode = nodeSudoku;\r\n                    // labelBlock.string = \"-\";\r\n                });\r\n\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const label = nodeNum.addComponent(Label);\r\n            label.string = ` ${i + 1} `;\r\n            label.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n            this.numberLabels.push(label);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const selectedValue = parseInt(label.string);\r\n                    if (!isNaN(selectedValue)) {\r\n                        this.volumeSelectNode.play();\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const solutionValue = this.solutionGame[position];\r\n                        const isCorrect = selectedValue === solutionValue && !this.checkConflict(selectedValue, i, j);\r\n                        console.log(isCorrect);\r\n\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            this.redNumber++;\r\n                            this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            this.playerFault.node.active = true;\r\n                            if (this.redNumber === 4) {\r\n                                console.log(\"thua rồi nhé !!!\");\r\n                                this.gameOver.active = true;\r\n                                this.playerFault.string = `Lỗi 3/3`;\r\n                                this.volumeLose.play();                       }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n"]}