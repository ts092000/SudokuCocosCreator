{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","Label","Prefab","Button","instantiate","SudokuCreator","ccclass","property","GameController","onLoad","createPuzzleBoard","buttonMenuNode","active","sudokuCreator","childMatrixWidth","boardData","createSudoku","solution","puzzleGame","solutionGame","i","puzzle","length","push","console","log","j","value","node","setPosition","boardNode","addChild","labelBlock","addComponent","string","toString","on","EventType","TOUCH_END","getPosition","buttonNode","buttonPrefab","getComponent","activeNode","children","find","childNode","getParent"],"mappings":"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","sourcesContent":["// import { _decorator, Component, Node, VerticalTextAlignment, Label } from 'cc';\r\n// const { ccclass, property } = _decorator;\r\n// import { SudokuCreator } from '@algorithm.ts/sudoku';\r\n\r\n// @ccclass('GameController')\r\n// export class GameController extends Component {\r\n//     @property(Node)\r\n//     boardNode: Node;\r\n\r\n//     onLoad() {\r\n//         this.createPuzzleBoard();\r\n//     }\r\n//     createPuzzleBoard(){\r\n//         let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n//         let boardData = sudokuCreator.createSudoku(0.2);\r\n//         let solution = boardData.solution;\r\n//         let puzzleGame: number[] = [];\r\n//         let solutionGame: number[] = [];\r\n\r\n//         for (let i = 0; i < boardData.puzzle.length; i++) {\r\n//             puzzleGame.push(boardData.puzzle[i] + 1);\r\n//         }\r\n//         for (let i = 0; i < boardData.solution.length; i++) {\r\n//             solutionGame.push(boardData.solution[i] + 1);\r\n//         }\r\n\r\n//         console.log(puzzleGame);\r\n//         console.log(solutionGame);\r\n\r\n//         for (let i = 0; i < 9; i++) {\r\n//             for (let j = 0; j < 9; j++) {\r\n//                 const value = puzzleGame[i*9 + j];\r\n//                 const node = new Node();\r\n//                 node.setPosition(i * 55, j * 55);\r\n//                 this.boardNode.addChild(node);\r\n                \r\n//                 const labelBlock = node.addComponent(Label);\r\n//                 labelBlock.string = value === 0 ? \"-\" : value.toString();\r\n\r\n//             }\r\n//         }\r\n\r\n//     }   \r\n// }\r\n\r\n\r\nimport { _decorator, Component, Node, VerticalTextAlignment, Label, resources, Prefab, Button, instantiate } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Node)\r\n    buttonMenuNode: Node;\r\n\r\n    @property(Prefab)\r\n    buttonPrefab: Prefab;\r\n\r\n    onLoad() {\r\n        this.createPuzzleBoard();\r\n        this.buttonMenuNode.active = false;\r\n    }\r\n\r\n    createPuzzleBoard(){\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(0.2);\r\n        let solution = boardData.solution;\r\n        let puzzleGame: number[] = [];\r\n        let solutionGame: number[] = [];\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        console.log(puzzleGame);\r\n        console.log(solutionGame);\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = puzzleGame[i*9 + j];\r\n                const node = new Node();\r\n                node.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(node);\r\n                \r\n                const labelBlock = node.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"-\" : value.toString();\r\n\r\n                if (value === 0) {\r\n                    node.addComponent(Button);\r\n                    node.on(Node.EventType.TOUCH_END, () => {\r\n                        // Xử lý sự kiện click vào ô có giá trị '-'\r\n                        this.buttonMenuNode.active = true;\r\n                        this.buttonMenuNode.setPosition(node.getPosition());\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= 9; i++) {\r\n            const buttonNode = instantiate(buttonPrefab);\r\n            buttonNode.getComponent(Label).string = i.toString();\r\n            buttonNode.on(Node.EventType.TOUCH_END, () => {\r\n                // Xử lý sự kiện click vào nút số\r\n                const activeNode = this.buttonMenuNode.children.find((childNode) => {\r\n                    return childNode.active;\r\n                });\r\n                if (activeNode) {\r\n                    const labelBlock = activeNode.getParent().getComponent(Label);\r\n                    labelBlock.string = i.toString();\r\n                    this.buttonMenuNode.active = false;\r\n                }\r\n            });\r\n            this.buttonMenuNode.addChild(buttonNode);\r\n        }\r\n    }   \r\n}\r\n"]}