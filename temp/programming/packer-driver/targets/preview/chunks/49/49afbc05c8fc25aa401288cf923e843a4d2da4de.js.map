{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","Graphics","SudokuCreator","GameView","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","timeBestArr","timeBestArr1","timeBestArr2","start","bestscore","localStorage","getItem","JSON","parse","bestTime","string","Math","min","bestscore1","bestscore2","onLoad","levelPanel","active","console","log","startGamePlayer","gameView","StartGame","volumeStart","play","updateTimer","timerLabel","volumeGameSetting","bgMain","getComponent","volume","settingVolumeBg","progress","displayVolumeSetting","settingNode","pause","volumeGameEffect","volumeLose","getVolume","setVolume","settingVolumeEffect","volumeWinGame","volumeSelectNode","rePlayGame","continueGame","resume","displayLevelPanel","update","easyLevelGame","createPuzzleBoard","schedule","levelLabel","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","emtyNode","value","j","nodeSudoku","setPosition","boardNode","addChild","frameNode","labelBlock","addComponent","toString","color","BLACK","on","EventType","TOUCH_END","graphics","rect","strokeColor","fillColor","fill","nodeNum","labelValue","verticalAlign","CENTER","parent","node","position","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","solutionValue","isCorrect","RED","playerFault","gameOver","BLUE","setItem","stringify","winGame"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider, Graphics, SpriteFrame, loader } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    // @property(Node)\r\n    // startGame: Node;\r\n    \r\n    @property(GameView)\r\n    gameView: GameView;\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n\r\n    @property(AudioClip)\r\n    volumeStart: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeWinGame: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Button)\r\n    settingVolumeAll: Slider;\r\n\r\n    @property(Node)\r\n    settingNode: Node;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Slider)\r\n    settingVolumeEffect: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Node)\r\n    winGame: Node;\r\n\r\n    @property(Label)\r\n    bestTime: Label;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    timeBestArr: number[] = [];\r\n    timeBestArr1: number[] = [];\r\n    timeBestArr2: number[] = []; \r\n    start() {\r\n\r\n            let bestscore=localStorage.getItem('bestTime');\r\n            if(bestscore){\r\n                this.timeBestArr=JSON.parse(bestscore);\r\n                this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr))\r\n            }\r\n            let bestscore1=localStorage.getItem('bestTime1');\r\n            if(bestscore1){\r\n                this.timeBestArr1=JSON.parse(bestscore1);\r\n                this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1))\r\n            }\r\n            let bestscore2=localStorage.getItem('bestTime2');\r\n            if(bestscore2){\r\n                this.timeBestArr2=JSON.parse(bestscore2);\r\n                this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2))\r\n            }\r\n\r\n        // let bestscore=localStorage.getItem('bestTime');\r\n        // if(bestscore){\r\n        //    this.timeBestArr=JSON.parse(bestscore);\r\n        //    this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr))\r\n        // }\r\n    }\r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    startGamePlayer(){\r\n        this.gameView.StartGame.active = false;\r\n        this.volumeStart.play();\r\n    }\r\n    updateTimer() {\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){\r\n        this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n    }\r\n    displayVolumeSetting(){\r\n        this.settingNode.active = true;\r\n        director.pause();\r\n    }\r\n    volumeGameEffect(){\r\n        this.volumeLose.getVolume();\r\n        this.volumeLose.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeWinGame.getVolume();\r\n        this.volumeWinGame.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeSelectNode.getVolume();\r\n        this.volumeSelectNode.setVolume(this.settingVolumeEffect.progress);\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    continueGame(){\r\n        director.resume();\r\n        this.settingNode.active = false;\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    update(){\r\n        if(this.difficultyLevel == 0.1){\r\n            this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr));\r\n        } else if(this.difficultyLevel == 0.2){\r\n            this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1));\r\n        } else if(this.difficultyLevel == 0.3){\r\n            this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2));\r\n\r\n        }\r\n    }\r\n\r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        // this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        // this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        // this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n    }\r\n    createPuzzleBoard(){\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        let emtyNode = 0;\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n\r\n                const frameNode = new Node(\"Frame\");\r\n                frameNode.setPosition(i * 55, j * 55);\r\n                nodeSudoku.addChild(frameNode);\r\n\r\n\r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n                labelBlock.color = Color.BLACK;   \r\n\r\n                if (value === 0) {\r\n                    emtyNode++;\r\n                }\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    if (value === 0) {\r\n                        this.selectedNode = nodeSudoku;\r\n                        labelBlock.string = \"-\";\r\n                        console.log(emtyNode);\r\n                        \r\n                        const graphics = frameNode.addComponent(Graphics);\r\n                        graphics.rect(-25, -25, 50, 50);\r\n                        graphics.strokeColor = new Color(0, 0, 0, 255); // Đặt màu đen cho đường viền\r\n\r\n                        // Tạo màu nền trong suốt cho khung\r\n                        const color = new Color(255, 255, 255, 100); // Đặt màu trắng trong suốt\r\n                        graphics.fillColor = color;\r\n                        graphics.fill();        \r\n                    }\r\n                });\r\n\r\n\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const labelValue = nodeNum.addComponent(Label);\r\n            labelValue.string = `  ${i + 1}  `;\r\n            labelValue.color = Color.BLACK;\r\n\r\n            labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n            this.numberLabels.push(labelValue);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const selectedValue = parseInt(labelValue.string);\r\n                    if (!isNaN(selectedValue)) {\r\n                        this.volumeSelectNode.play();\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const solutionValue = this.solutionGame[position];\r\n                        const isCorrect = selectedValue === solutionValue;\r\n                        console.log(isCorrect);\r\n\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            this.redNumber++;\r\n                            this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            this.playerFault.node.active = true;\r\n                            if (this.redNumber == 4) {\r\n                                console.log(\"thua rồi nhé !!!\");\r\n                                this.gameOver.active = true;\r\n                                this.playerFault.string = `Lỗi 3/3`;\r\n                                this.volumeLose.play();\r\n                            }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                            emtyNode -= 1;\r\n                            console.log(emtyNode);\r\n                            if (emtyNode === 0){\r\n                                console.log(\"winner\");\r\n                                this.volumeWinGame.play();\r\n                                if(this.difficultyLevel == 0.1){\r\n                                    this.timeBestArr.push(this.timeElapsed);\r\n                                    localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                                }\r\n                                if(this.difficultyLevel == 0.2){\r\n                                    this.timeBestArr1.push(this.timeElapsed);\r\n                                    localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                                }   \r\n                                if(this.difficultyLevel == 0.3){\r\n                                    this.timeBestArr2.push(this.timeElapsed);\r\n                                    localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                                }\r\n                                this.winGame.active = true;                                \r\n                            }                      \r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n// if (!isNaN(selectedValue)) {\r\n                    //     this.volumeSelectNode.play();\r\n                    //     const i = Math.floor(this.selectedNode.position.x / 55);\r\n                    //     const j = Math.floor(this.selectedNode.position.y / 55);\r\n                    //     const position = i * 9 + j;\r\n                    //     const rowStart = Math.floor(i / 3) * 3;\r\n                    //     const colStart = Math.floor(j / 3) * 3;\r\n                    //     let isCorrect = true;\r\n                    \r\n                    //     // Check row\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== j && selectedValue === this.puzzleGame[i*9 + k]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check column\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== i && selectedValue === this.puzzleGame[k*9 + j]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check 3x3\r\n                    //     for (let row = 0; row < 3; row++) {\r\n                    //         for (let col = 0; col < 3; col++) {\r\n                    //             const r = rowStart + row;\r\n                    //             const c = colStart + col;\r\n                    //             if ((r !== i || c !== j) && selectedValue === this.puzzleGame[r*9 + c]) {\r\n                    //                 isCorrect = false;\r\n                    //                 break;\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     console.log(isCorrect);\r\n                    \r\n                    //     const labelBlock = this.selectedNode.getComponent(Label);\r\n                    //     if (!isCorrect) {\r\n                    //         labelBlock.color = Color.RED;\r\n                    //         this.redNumber++;\r\n                    //         this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                    //         this.playerFault.node.active = true;\r\n                    //         if (this.redNumber === 4) {\r\n                    //             console.log(\"thua rồi nhé !!!\");\r\n                    //             this.gameOver.active = true;\r\n                    //             this.playerFault.string = `Lỗi 3/3`;\r\n                    //             this.volumeLose.play();\r\n                    //         }\r\n                    //         emtyNode++;\r\n                    //     } else {\r\n                    //         labelBlock.color = Color.BLUE;\r\n                    //         emtyNode--;\r\n                    //         console.log(emtyNode);\r\n                    //         if (emtyNode === 0){\r\n                    //             console.log(\"winner\");\r\n                    //             this.timeBestArr.push(this.timeElapsed);\r\n                    //             localStorage.setItem('scores', JSON.stringify(this.timeBestArr));\r\n                    //             let bestTime = Math.max(...this.timeBestArr);\r\n                    //             console.log(bestTime);\r\n                    //         }                        }\r\n                    //     labelBlock.string = selectedValue.toString();\r\n\r\n                    // }\r\n\r\n\r\n"]}