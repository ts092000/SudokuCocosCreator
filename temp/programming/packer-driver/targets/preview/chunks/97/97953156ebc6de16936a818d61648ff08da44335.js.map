{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","SudokuCreator","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","onLoad","levelPanel","active","console","log","updateTimer","timerLabel","string","volumeGameSetting","bgMain","getComponent","volume","settingVolumeBg","progress","rePlayGame","displayLevelPanel","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","mediumLevelGame","hardLevelGame","beginGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","value","j","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","on","EventType","TOUCH_END","nodeNum","label","verticalAlign","CENTER","parent","position","Math","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","rowStart","colStart","isCorrect","k","row","col","r","c","color","RED","playerFault","gameOver","volumeLose","play","BLUE"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    \r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    updateTimer() {\r\n        // Tăng số giây đã trôi qua và cập nhật đối tượng Label\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){\r\n        this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n    }\r\n    beginGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    createPuzzleBoard(){\r\n        //this.playerFault.color = Color.RED;\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    this.selectedNode = nodeSudoku;\r\n                    // labelBlock.string = \"-\";\r\n                });\r\n\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const label = nodeNum.addComponent(Label);\r\n            label.string = ` ${i + 1} `;\r\n            label.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n            this.numberLabels.push(label);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const selectedValue = parseInt(label.string);\r\n                    // if (!isNaN(selectedValue)) {\r\n                    //     this.volumeSelectNode.play();\r\n                    //     const i = Math.floor(this.selectedNode.position.x / 55);\r\n                    //     const j = Math.floor(this.selectedNode.position.y / 55);\r\n                    //     const position = i * 9 + j;\r\n                    //     const solutionValue = this.solutionGame[position];\r\n                    //     const isCorrect = selectedValue === solutionValue;\r\n                    //     console.log(isCorrect);\r\n\r\n                    //     const labelBlock = this.selectedNode.getComponent(Label);\r\n                    //     if (!isCorrect) {\r\n                    //         labelBlock.color = Color.RED;\r\n                    //         this.redNumber++;\r\n                    //         this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                    //         this.playerFault.node.active = true;\r\n                    //         if (this.redNumber === 4) {\r\n                    //             console.log(\"thua rồi nhé !!!\");\r\n                    //             this.gameOver.active = true;\r\n                    //             this.playerFault.string = `Lỗi 3/3`;\r\n                    //             this.volumeLose.play();                       }\r\n                    //     } else {\r\n                    //         labelBlock.color = Color.BLUE;\r\n                    //     }\r\n                    //     labelBlock.string = selectedValue.toString();\r\n                    // }\r\n\r\n                    if (!isNaN(selectedValue)) {\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const rowStart = Math.floor(i / 3) * 3;\r\n                        const colStart = Math.floor(j / 3) * 3;\r\n                        let isCorrect = true;\r\n                    \r\n                        // Check row\r\n                        for (let k = 0; k < 9; k++) {\r\n                            if (k !== j && selectedValue === this.puzzleGame[i*9 + k]) {\r\n                                isCorrect = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    \r\n                        // Check column\r\n                        for (let k = 0; k < 9; k++) {\r\n                            if (k !== i && selectedValue === this.puzzleGame[k*9 + j]) {\r\n                                isCorrect = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    \r\n                        // Check 3x3\r\n                        for (let row = 0; row < 3; row++) {\r\n                            for (let col = 0; col < 3; col++) {\r\n                                const r = rowStart + row;\r\n                                const c = colStart + col;\r\n                                if ((r !== i || c !== j) && selectedValue === this.puzzleGame[r*9 + c]) {\r\n                                    isCorrect = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    \r\n                        console.log(isCorrect);\r\n                    \r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            this.redNumber++;\r\n                            this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            this.playerFault.node.active = true;\r\n                            if (this.redNumber === 4) {\r\n                                console.log(\"thua rồi nhé !!!\");\r\n                                this.gameOver.active = true;\r\n                                this.playerFault.string = `Lỗi 3/3`;\r\n                                this.volumeLose.play();\r\n                            }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n"]}