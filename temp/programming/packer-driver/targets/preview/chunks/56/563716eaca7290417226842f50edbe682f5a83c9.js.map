{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","SudokuCreator","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","onLoad","createPuzzleBoard","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","console","log","value","j","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","string","toString","on","EventType","TOUCH_END","nodeNum","label","verticalAlign","CENTER","parent","node","position","Math","floor","numberLabels","getComponent","row","y","col","x","solutionIndex","parseInt"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(Node)\r\n    boardNode: Node;\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n    private selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n\r\n\r\n    onLoad() {\r\n        this.createPuzzleBoard();\r\n    }\r\n\r\n    \r\n\r\n    createPuzzleBoard(){\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(0.2);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        console.log(this.puzzleGame);\r\n        console.log(this.solutionGame);\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"-\" : value.toString();\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    this.selectedNode = nodeSudoku;\r\n                });\r\n\r\n                const nodeNum = new Node(\"NumberValueLabel\");\r\n                const label = nodeNum.addComponent(Label);\r\n                label.string = `${i + 1}`;\r\n                label.verticalAlign = VerticalTextAlignment.CENTER;\r\n                nodeNum.parent = this.node;\r\n                nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -110, 0);\r\n                this.numberLabels.push(label);\r\n                nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                    if (this.selectedNode) {\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n                        labelBlock.string = label.string;\r\n                        // console.log(label.string);\r\n                        // labelBlock.color = Color.BLACK;\r\n\r\n                        const row = Math.floor(this.selectedNode.y / 55);\r\n                        const col = Math.floor(this.selectedNode.x / 55);\r\n                        const solutionIndex = row * 9 + col;\r\n                        console.log(this.solutionGame[solutionIndex] === parseInt(label.string));\r\n                    }\r\n                });\r\n\r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\n"]}