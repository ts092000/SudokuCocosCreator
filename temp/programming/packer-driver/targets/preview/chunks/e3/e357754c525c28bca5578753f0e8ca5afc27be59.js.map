{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/node_modules/@algorithm.ts/dlx/lib/esm/index.mjs"],"names":["DancingLinkX","constructor","props","_count","_row","_col","_L","_R","_U","_D","_sz","MAX_N","Array","destroy","length","init","columnCount","i","fill","addRow","r","columns","first","c","solve","selectedRowNos","_algorithmX","dep","_removeColumn","j","_restoreColumn"],"mappings":"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","sourcesContent":["class DancingLinkX {\n    _count;\n    _row;\n    _col;\n    _L;\n    _R;\n    _U;\n    _D;\n    _sz;\n    constructor(props) {\n        const { MAX_N } = props;\n        this._count = new Array(MAX_N);\n        this._row = new Array(MAX_N);\n        this._col = new Array(MAX_N);\n        this._L = new Array(MAX_N);\n        this._R = new Array(MAX_N);\n        this._U = new Array(MAX_N);\n        this._D = new Array(MAX_N);\n        this._sz = 0;\n    }\n    destroy() {\n        this._sz = 0;\n        this._count.length = 0;\n        this._row.length = 0;\n        this._col.length = 0;\n        this._L.length = 0;\n        this._R.length = 0;\n        this._U.length = 0;\n        this._D.length = 0;\n    }\n    init(columnCount) {\n        const { _L, _R, _U, _D, _count } = this;\n        const _sz = columnCount + 1;\n        for (let i = 0; i < _sz; ++i) {\n            _L[i] = i - 1;\n            _R[i] = i + 1;\n            _U[i] = i;\n            _D[i] = i;\n        }\n        _R[columnCount] = 0;\n        _L[0] = columnCount;\n        _count.fill(0, 0, _sz);\n        this._sz = _sz;\n    }\n    addRow(r, columns) {\n        const { _count, _row, _col, _L, _R, _U, _D } = this;\n        let { _sz } = this;\n        const first = _sz;\n        for (let i = 0; i < columns.length; ++i, ++_sz) {\n            const c = columns[i];\n            _row[_sz] = r;\n            _col[_sz] = c;\n            _count[c] += 1;\n            _L[_sz] = _sz - 1;\n            _R[_sz] = _sz + 1;\n            _D[_sz] = c;\n            _D[_U[c]] = _sz;\n            _U[_sz] = _U[c];\n            _U[c] = _sz;\n        }\n        _R[_sz - 1] = first;\n        _L[first] = _sz - 1;\n        this._sz = _sz;\n    }\n    solve() {\n        if (this._sz === 0)\n            return null;\n        const selectedRowNos = [];\n        return this._algorithmX(0, selectedRowNos) ? selectedRowNos : null;\n    }\n    _algorithmX(dep, selectedRowNos) {\n        const { _count, _row, _col, _L, _R, _D } = this;\n        if (_R[0] === 0) {\n            selectedRowNos.length = dep;\n            return true;\n        }\n        let c = _R[0];\n        for (let i = _R[0]; i !== 0; i = _R[i]) {\n            if (_count[i] < _count[c])\n                c = i;\n        }\n        this._removeColumn(c);\n        for (let i = _D[c]; i !== c; i = _D[i]) {\n            selectedRowNos[dep] = _row[i];\n            for (let j = _R[i]; j !== i; j = _R[j])\n                this._removeColumn(_col[j]);\n            if (this._algorithmX(dep + 1, selectedRowNos))\n                return true;\n            for (let j = _L[i]; j !== i; j = _L[j])\n                this._restoreColumn(_col[j]);\n        }\n        this._restoreColumn(c);\n        return false;\n    }\n    _removeColumn(c) {\n        const { _count, _col, _L, _R, _U, _D } = this;\n        _L[_R[c]] = _L[c];\n        _R[_L[c]] = _R[c];\n        for (let i = _D[c]; i !== c; i = _D[i]) {\n            for (let j = _R[i]; j !== i; j = _R[j]) {\n                _U[_D[j]] = _U[j];\n                _D[_U[j]] = _D[j];\n                _count[_col[j]] -= 1;\n            }\n        }\n    }\n    _restoreColumn(c) {\n        const { _count, _col, _L, _R, _U, _D } = this;\n        for (let i = _U[c]; i !== c; i = _U[i]) {\n            for (let j = _L[i]; j !== i; j = _L[j]) {\n                _count[_col[j]] += 1;\n                _U[_D[j]] = j;\n                _D[_U[j]] = j;\n            }\n        }\n        _L[_R[c]] = c;\n        _R[_L[c]] = c;\n    }\n}\n\nexport { DancingLinkX };\n//# sourceMappingURL=index.mjs.map\n"]}