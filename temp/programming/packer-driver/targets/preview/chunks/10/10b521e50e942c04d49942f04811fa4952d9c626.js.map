{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/node_modules/@algorithm.ts/sudoku/lib/esm/index.mjs"],"names":["SudokuSize","SudokuSolver","SudokuCreator","createMatrixCodeMap","size","BASE_1","BASE_3","MATRIX","BOARD","matCodeMap","Array","r0","code0","r","R","i","I","code","fill","createMatrixCoordinateMap","matCoordinateMap","idx","c0","nextIdx","verifySolution","solution","visited","visitedFlag","w","knuthShuffle","randomInt","DancingLinkX","constructor","SUDOKU_CHILD_MATRIX_WIDTH","BASE_2","BASE_4","MATRIX_RANK","createSudokuBoardData","fillSudokuBoardData","board","value","copySudokuBoardData","srcBoard","dstBoard","toMatrixStyleBoardData","results","id","row","c","options","DL_TOTAL_COLUMNS","dlx","constraints","childMatrixWidth","DL_MAX_ROWS","DL_MAX_NODES","MAX_N","solve","puzzle","SUDOKU_NODES","encode","constraint","init","matCode","lv","rv","v","rowNum","addRow","answer","_code","solver","gridCodes","candidates","availableNums","tmpBoard","difficulty","_resolveDifficulty","createSudoku","_createSolution","_createPuzzle","radicalPuzzle","filledCount","Math","round","random","_end","max","min","p","candidatesSize","_collectCandidates","x","Error","floor","j","p0","i0","ri","tot","_difficulty"],"mappings":"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","sourcesContent":["import { knuthShuffle, randomInt } from '@algorithm.ts/shuffle';\nimport { DancingLinkX } from '@algorithm.ts/dlx';\n\nclass SudokuSize {\n    BASE_1;\n    BASE_2;\n    BASE_3;\n    BASE_4;\n    MATRIX_RANK;\n    MATRIX;\n    BOARD;\n    constructor(SUDOKU_CHILD_MATRIX_WIDTH) {\n        const BASE_1 = SUDOKU_CHILD_MATRIX_WIDTH;\n        const BASE_2 = BASE_1 * BASE_1;\n        const BASE_3 = BASE_2 * BASE_1;\n        const BASE_4 = BASE_3 * BASE_1;\n        this.MATRIX_RANK = this.BASE_1 = BASE_1;\n        this.MATRIX = this.BASE_2 = BASE_2;\n        this.BASE_3 = BASE_3;\n        this.BOARD = this.BASE_4 = BASE_4;\n    }\n}\n\nconst createSudokuBoardData = (size) => new Array(size.BOARD);\nconst fillSudokuBoardData = (board, value, size) => {\n    board.fill(value, 0, size.BOARD);\n};\nconst copySudokuBoardData = (srcBoard, dstBoard, size) => {\n    const { BOARD } = size;\n    for (let i = 0; i < BOARD; ++i)\n        dstBoard[i] = srcBoard[i];\n};\nconst toMatrixStyleBoardData = (board, size) => {\n    const results = [];\n    const { MATRIX } = size;\n    for (let r = 0, id = 0; r < MATRIX; ++r) {\n        const row = [];\n        results[r] = row;\n        for (let c = 0; c < MATRIX; ++c, ++id)\n            row[c] = board[id];\n    }\n    return results;\n};\nfunction createMatrixCodeMap(size) {\n    const { BASE_1, BASE_3, MATRIX, BOARD } = size;\n    const matCodeMap = new Array(BOARD);\n    for (let r0 = 0, code0 = 0; r0 < BOARD; r0 += BASE_3, code0 += BASE_1) {\n        for (let r = r0, R = r0 + BASE_3; r < R; r += MATRIX) {\n            for (let i = r, I = r + MATRIX, code = code0; i < I; i += BASE_1) {\n                matCodeMap.fill(code++, i, i + BASE_1);\n            }\n        }\n    }\n    return matCodeMap;\n}\nfunction createMatrixCoordinateMap(size) {\n    const { BASE_1, BASE_3, MATRIX, BOARD } = size;\n    const matCoordinateMap = new Array(BOARD);\n    for (let r0 = 0, idx = 0; r0 < BOARD; r0 += BASE_3) {\n        for (let r = r0, R = r0 + BASE_3; r < R; r += MATRIX) {\n            for (let c0 = 0; c0 < MATRIX; c0 += BASE_1) {\n                const nextIdx = idx + BASE_1;\n                matCoordinateMap.fill(r0 + c0, idx, nextIdx);\n                idx = nextIdx;\n            }\n        }\n    }\n    return matCoordinateMap;\n}\nfunction verifySolution(solution, size) {\n    const { BASE_1, BASE_3, MATRIX, BOARD } = size;\n    for (let i = 0; i < BOARD; ++i) {\n        if (solution[i] === -1)\n            return false;\n    }\n    const visited = new Array(MATRIX).fill(0);\n    let visitedFlag = 1;\n    for (let r0 = 0; r0 < BOARD; r0 += MATRIX, ++visitedFlag) {\n        for (let i = r0, I = r0 + MATRIX; i < I; ++i) {\n            const w = solution[i];\n            if (visited[w] === visitedFlag)\n                return false;\n            visited[w] = visitedFlag;\n        }\n    }\n    for (let c0 = 0; c0 < MATRIX; ++c0, ++visitedFlag) {\n        for (let i = c0; i < BOARD; i += MATRIX) {\n            const w = solution[i];\n            if (visited[w] === visitedFlag)\n                return false;\n            visited[w] = visitedFlag;\n        }\n    }\n    for (let r0 = 0; r0 < BOARD; r0 += BASE_3) {\n        for (let c0 = 0; c0 < MATRIX; c0 += BASE_1, ++visitedFlag) {\n            for (let r = r0, R = r0 + BASE_3; r < R; r += MATRIX) {\n                for (let i = r + c0, I = i + BASE_1; i < I; ++i) {\n                    const w = solution[i];\n                    if (visited[w] === visitedFlag)\n                        return false;\n                    visited[w] = visitedFlag;\n                }\n            }\n        }\n    }\n    return true;\n}\n\nclass SudokuSolver {\n    size;\n    DL_TOTAL_COLUMNS;\n    dlx;\n    matCodeMap;\n    constraints = new Array(4);\n    constructor(options) {\n        const { childMatrixWidth } = options;\n        const size = new SudokuSize(childMatrixWidth);\n        const DL_TOTAL_COLUMNS = size.BOARD * 4;\n        const DL_MAX_ROWS = size.BOARD * size.MATRIX;\n        const DL_MAX_NODES = DL_TOTAL_COLUMNS * DL_MAX_ROWS + size.MATRIX + 1;\n        const dlx = new DancingLinkX({ MAX_N: DL_MAX_NODES });\n        this.size = size;\n        this.DL_TOTAL_COLUMNS = DL_TOTAL_COLUMNS;\n        this.dlx = dlx;\n        this.matCodeMap = createMatrixCodeMap(size);\n    }\n    solve(puzzle, solution) {\n        const { size, DL_TOTAL_COLUMNS: SUDOKU_NODES, constraints, matCodeMap, dlx } = this;\n        const { MATRIX, BOARD } = size;\n        const encode = (constraint, code) => constraint * BOARD + code + 1;\n        dlx.init(SUDOKU_NODES);\n        for (let r = 0, id = 0; r < MATRIX; ++r) {\n            for (let c = 0; c < MATRIX; ++c, ++id) {\n                const w = puzzle[id];\n                const matCode = matCodeMap[id];\n                const lv = w === -1 ? 0 : w;\n                const rv = w === -1 ? MATRIX : w + 1;\n                for (let v = lv; v < rv; ++v) {\n                    constraints[0] = encode(0, id);\n                    constraints[1] = encode(1, r * MATRIX + v);\n                    constraints[2] = encode(2, c * MATRIX + v);\n                    constraints[3] = encode(3, matCode * MATRIX + v);\n                    const rowNum = id * MATRIX + v + 1;\n                    dlx.addRow(rowNum, constraints);\n                }\n            }\n        }\n        const answer = dlx.solve();\n        if (answer === null)\n            return false;\n        if (solution !== null) {\n            for (const _code of answer) {\n                const code = _code - 1;\n                const v = code % MATRIX;\n                const id = (code / MATRIX) >> 0;\n                solution[id] = v;\n            }\n        }\n        return true;\n    }\n}\n\nclass SudokuCreator {\n    size;\n    solver;\n    matCoordinateMap;\n    gridCodes;\n    candidates;\n    availableNums;\n    tmpBoard;\n    difficulty;\n    constructor(options) {\n        const { childMatrixWidth, difficulty = 0.2 } = options;\n        const size = new SudokuSize(childMatrixWidth);\n        const solver = new SudokuSolver({ childMatrixWidth });\n        const gridCodes = new Array(size.BOARD);\n        for (let i = 0; i < size.BOARD; ++i)\n            gridCodes[i] = i;\n        this.size = size;\n        this.solver = solver;\n        this.matCoordinateMap = createMatrixCoordinateMap(size);\n        this.gridCodes = gridCodes;\n        this.difficulty = this._resolveDifficulty(difficulty);\n        this.candidates = new Array(size.MATRIX);\n        this.availableNums = new Array(size.MATRIX);\n        this.tmpBoard = createSudokuBoardData(size);\n    }\n    createSudoku(difficulty) {\n        if (difficulty != null)\n            this.difficulty = this._resolveDifficulty(difficulty);\n        const solution = this._createSolution();\n        const puzzle = this._createPuzzle(solution);\n        return { puzzle, solution: solution };\n    }\n    _createSolution() {\n        const { size, candidates, gridCodes, solver, tmpBoard: radicalPuzzle } = this;\n        fillSudokuBoardData(radicalPuzzle, -1, size);\n        knuthShuffle(gridCodes);\n        const filledCount = Math.round((Math.random() * 0.3 + 0.2) * size.BOARD);\n        const _end = Math.max(size.BASE_3, Math.min(size.BOARD, filledCount));\n        for (let i = 0; i < _end; ++i) {\n            const p = gridCodes[i];\n            const candidatesSize = this._collectCandidates(radicalPuzzle, p);\n            if (candidatesSize < 1)\n                continue;\n            const x = randomInt(candidatesSize);\n            const v = candidates[x];\n            radicalPuzzle[p] = v;\n        }\n        const solution = createSudokuBoardData(size);\n        for (let i = 0; i < _end; ++i) {\n            const p = gridCodes[i];\n            if (p === -1)\n                continue;\n            if (solver.solve(radicalPuzzle, solution))\n                return solution;\n            radicalPuzzle[p] = -1;\n        }\n        throw new Error('[createSolution] This is impossible!');\n    }\n    _createPuzzle(solution) {\n        const { size, candidates, gridCodes, solver, difficulty } = this;\n        const puzzle = createSudokuBoardData(size);\n        copySudokuBoardData(solution, puzzle, size);\n        knuthShuffle(gridCodes);\n        const _end = Math.floor(size.BOARD * difficulty);\n        for (let i = 0; i < _end; ++i) {\n            const p = gridCodes[i];\n            const candidatesSize = this._collectCandidates(puzzle, p);\n            let j = 0;\n            for (; j < candidatesSize; ++j) {\n                puzzle[p] = candidates[j];\n                if (solver.solve(puzzle, null))\n                    break;\n            }\n            puzzle[p] = j < candidatesSize ? solution[p] : -1;\n        }\n        return puzzle;\n    }\n    _collectCandidates(board, p) {\n        const { size, matCoordinateMap, candidates, availableNums } = this;\n        const { MATRIX_RANK, MATRIX, BOARD } = size;\n        const c0 = p % MATRIX;\n        const r0 = p - c0;\n        const p0 = matCoordinateMap[p];\n        availableNums.fill(true);\n        for (let i = r0, I = r0 + MATRIX; i < I; ++i) {\n            const v = board[i];\n            if (v !== -1)\n                availableNums[v] = false;\n        }\n        for (let i = c0; i < BOARD; i += MATRIX) {\n            const v = board[i];\n            if (v !== -1)\n                availableNums[v] = false;\n        }\n        for (let i0 = p0, ri = 0; ri < MATRIX_RANK; ++ri, i0 += MATRIX) {\n            for (let i = i0, I = i0 + MATRIX_RANK; i < I; ++i) {\n                const v = board[i];\n                if (v !== -1)\n                    availableNums[v] = false;\n            }\n        }\n        let tot = 0;\n        for (let v = 0; v < MATRIX; ++v) {\n            if (availableNums[v])\n                candidates[tot++] = v;\n        }\n        return tot;\n    }\n    _resolveDifficulty(_difficulty) {\n        const difficulty = Math.max(0, Math.min(1, _difficulty)) * 0.8 + 0.2;\n        return difficulty;\n    }\n}\n\nexport { SudokuCreator, SudokuSize, SudokuSolver, copySudokuBoardData, createMatrixCodeMap, createMatrixCoordinateMap, createSudokuBoardData, fillSudokuBoardData, toMatrixStyleBoardData, verifySolution };\n//# sourceMappingURL=index.mjs.map\n"]}