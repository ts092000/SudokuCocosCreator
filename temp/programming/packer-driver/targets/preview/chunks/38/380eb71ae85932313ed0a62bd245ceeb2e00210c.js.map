{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","SudokuCreator","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","onLoad","createPuzzleBoard","console","log","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","value","j","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","string","toString","on","EventType","TOUCH_END","nodeNum","label","verticalAlign","CENTER","parent","node","position","Math","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","solutionValue","isCorrect","getComponent","color","RED","BLUE"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, SpriteFrame } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(Node)\r\n    boardNode: Node;\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n    private selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n\r\n\r\n    onLoad() {\r\n        this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n\r\n    \r\n\r\n    createPuzzleBoard(){\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(0.2);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"-\" : value.toString();\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    this.selectedNode = nodeSudoku;\r\n                });\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const label = nodeNum.addComponent(Label);\r\n            label.string = `${i + 1}`;\r\n            label.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -110, 0);\r\n            this.numberLabels.push(label);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    // const labelBlock = this.selectedNode.getComponent(Label);\r\n                    // labelBlock.string = label.string;\r\n                    // labelBlock.color = Color.BLACK;\r\n\r\n                    const selectedValue = parseInt(label.string);\r\n                    if (!isNaN(selectedValue)) {\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const solutionValue = this.solutionGame[position];\r\n                        const isCorrect = selectedValue === solutionValue;\r\n                        console.log(isCorrect);\r\n\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            // this.redCount++;\r\n                            // if (this.redCount === 3) {\r\n                            //     this.redCountArr[selectedValue - 1]++;\r\n                            //     this.redCount = 0;\r\n                            // }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n    }   \r\n}\r\n\r\n"]}