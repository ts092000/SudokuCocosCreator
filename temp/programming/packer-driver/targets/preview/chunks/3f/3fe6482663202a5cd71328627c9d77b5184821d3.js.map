{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","Prefab","instantiate","SudokuCreator","GameView","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","timeBestArr","timeBestArr1","timeBestArr2","start","bestscore","localStorage","getItem","JSON","parse","bestTime","string","Math","min","bestscore1","bestscore2","onLoad","levelPanel","active","console","log","startGamePlayer","gameView","StartGame","volumeStart","play","updateTimer","timerLabel","volumeGameSetting","bgMain","getComponent","volume","settingVolumeBg","progress","displayVolumeSetting","settingNode","pause","volumeGameEffect","volumeLose","getVolume","setVolume","settingVolumeEffect","volumeWinGame","volumeSelectNode","rePlayGame","continueGame","resume","displayLevelPanel","update","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","i","puzzle","length","push","solution","emtyNode","value","j","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","color","BLACK","on","EventType","TOUCH_END","setTimeout","prefabInstance","frameNode","position","parent","nodeNum","labelValue","verticalAlign","CENTER","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","solutionValue","isCorrect","RED","playerFault","gameOver","BLUE","setItem","stringify","winGame"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider, Graphics, SpriteFrame, loader, Prefab, instantiate } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    // @property(Node)\r\n    // startGame: Node;\r\n    \r\n    @property(GameView)\r\n    gameView: GameView;\r\n\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Node)\r\n    boardEffectNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n\r\n    @property(AudioClip)\r\n    volumeStart: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeWinGame: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Button)\r\n    settingVolumeAll: Slider;\r\n\r\n    @property(Node)\r\n    settingNode: Node;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Slider)\r\n    settingVolumeEffect: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Node)\r\n    winGame: Node;\r\n\r\n    @property(Label)\r\n    bestTime: Label;\r\n\r\n    @property(Prefab)\r\n    frameNode: Prefab;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    timeBestArr: number[] = [];\r\n    timeBestArr1: number[] = [];\r\n    timeBestArr2: number[] = []; \r\n    start() {\r\n\r\n            let bestscore=localStorage.getItem('bestTime');\r\n            if(bestscore){\r\n                this.timeBestArr=JSON.parse(bestscore);\r\n                this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr))\r\n            }\r\n            let bestscore1=localStorage.getItem('bestTime1');\r\n            if(bestscore1){\r\n                this.timeBestArr1=JSON.parse(bestscore1);\r\n                this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1))\r\n            }\r\n            let bestscore2=localStorage.getItem('bestTime2');\r\n            if(bestscore2){\r\n                this.timeBestArr2=JSON.parse(bestscore2);\r\n                this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2))\r\n            }\r\n    }\r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    startGamePlayer(){\r\n        this.gameView.StartGame.active = false;\r\n        this.volumeStart.play();\r\n    }\r\n    updateTimer() {\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){\r\n        this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n    }\r\n    displayVolumeSetting(){\r\n        this.settingNode.active = true;\r\n        director.pause();\r\n    }\r\n    volumeGameEffect(){\r\n        this.volumeLose.getVolume();\r\n        this.volumeLose.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeWinGame.getVolume();\r\n        this.volumeWinGame.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeSelectNode.getVolume();\r\n        this.volumeSelectNode.setVolume(this.settingVolumeEffect.progress);\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    continueGame(){\r\n        director.resume();\r\n        this.settingNode.active = false;\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    update(){\r\n        if(this.difficultyLevel == 0.1){\r\n            this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr));\r\n        } else if(this.difficultyLevel == 0.2){\r\n            this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr1));\r\n        } else if(this.difficultyLevel == 0.3){\r\n            this.bestTime.string='Thời gian nhanh nhất: ' +(Math.min(...this.timeBestArr2));\r\n\r\n        }\r\n    }\r\n\r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n    }\r\n    createPuzzleBoard(){\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        let emtyNode = 0;\r\n        \r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n\r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n                labelBlock.color = Color.BLACK;   \r\n\r\n                if (value === 0) {\r\n                    emtyNode++;\r\n                }\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    if (value === 0) {\r\n                        this.selectedNode = nodeSudoku;\r\n                        // const prefabInstance = instantiate(this.frameNode);\r\n                        // prefabInstance.setPosition(nodeSudoku.position);\r\n                        // nodeSudoku.parent.addChild(prefabInstance);\r\n                        setTimeout(() => {\r\n                                const prefabInstance = instantiate(this.frameNode);\r\n                                prefabInstance.setPosition(nodeSudoku.position);\r\n                                nodeSudoku.parent.addChild(prefabInstance);\r\n                        }, 2000);\r\n                    }\r\n                });\r\n\r\n\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const labelValue = nodeNum.addComponent(Label);\r\n            labelValue.string = `  ${i + 1}  `;\r\n            labelValue.color = Color.BLACK;\r\n\r\n            labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n            this.numberLabels.push(labelValue);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const selectedValue = parseInt(labelValue.string);\r\n                    if (!isNaN(selectedValue)) {\r\n                        this.volumeSelectNode.play();\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const solutionValue = this.solutionGame[position];\r\n                        const isCorrect = selectedValue === solutionValue;\r\n                        console.log(isCorrect);\r\n\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            this.redNumber++;\r\n                            this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            this.playerFault.node.active = true;\r\n                            if (this.redNumber == 4) {\r\n                                console.log(\"thua rồi nhé !!!\");\r\n                                this.gameOver.active = true;\r\n                                this.playerFault.string = `Lỗi 3/3`;\r\n                                this.volumeLose.play();\r\n                            }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                            emtyNode -= 1;\r\n                            console.log(emtyNode);\r\n                            if (emtyNode === 0){\r\n                                console.log(\"winner\");\r\n                                this.volumeWinGame.play();\r\n                                if(this.difficultyLevel == 0.1){\r\n                                    this.timeBestArr.push(this.timeElapsed);\r\n                                    localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                                }\r\n                                if(this.difficultyLevel == 0.2){\r\n                                    this.timeBestArr1.push(this.timeElapsed);\r\n                                    localStorage.setItem('bestTime1', JSON.stringify(this.timeBestArr1));\r\n                                }   \r\n                                if(this.difficultyLevel == 0.3){\r\n                                    this.timeBestArr2.push(this.timeElapsed);\r\n                                    localStorage.setItem('bestTime2', JSON.stringify(this.timeBestArr2));\r\n                                }\r\n                                this.winGame.active = true;                                \r\n                            }                      \r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n// if (!isNaN(selectedValue)) {\r\n                    //     this.volumeSelectNode.play();\r\n                    //     const i = Math.floor(this.selectedNode.position.x / 55);\r\n                    //     const j = Math.floor(this.selectedNode.position.y / 55);\r\n                    //     const position = i * 9 + j;\r\n                    //     const rowStart = Math.floor(i / 3) * 3;\r\n                    //     const colStart = Math.floor(j / 3) * 3;\r\n                    //     let isCorrect = true;\r\n                    \r\n                    //     // Check row\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== j && selectedValue === this.puzzleGame[i*9 + k]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check column\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== i && selectedValue === this.puzzleGame[k*9 + j]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check 3x3\r\n                    //     for (let row = 0; row < 3; row++) {\r\n                    //         for (let col = 0; col < 3; col++) {\r\n                    //             const r = rowStart + row;\r\n                    //             const c = colStart + col;\r\n                    //             if ((r !== i || c !== j) && selectedValue === this.puzzleGame[r*9 + c]) {\r\n                    //                 isCorrect = false;\r\n                    //                 break;\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     console.log(isCorrect);\r\n                    \r\n                    //     const labelBlock = this.selectedNode.getComponent(Label);\r\n                    //     if (!isCorrect) {\r\n                    //         labelBlock.color = Color.RED;\r\n                    //         this.redNumber++;\r\n                    //         this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                    //         this.playerFault.node.active = true;\r\n                    //         if (this.redNumber === 4) {\r\n                    //             console.log(\"thua rồi nhé !!!\");\r\n                    //             this.gameOver.active = true;\r\n                    //             this.playerFault.string = `Lỗi 3/3`;\r\n                    //             this.volumeLose.play();\r\n                    //         }\r\n                    //         emtyNode++;\r\n                    //     } else {\r\n                    //         labelBlock.color = Color.BLUE;\r\n                    //         emtyNode--;\r\n                    //         console.log(emtyNode);\r\n                    //         if (emtyNode === 0){\r\n                    //             console.log(\"winner\");\r\n                    //             this.timeBestArr.push(this.timeElapsed);\r\n                    //             localStorage.setItem('scores', JSON.stringify(this.timeBestArr));\r\n                    //             let bestTime = Math.max(...this.timeBestArr);\r\n                    //             console.log(bestTime);\r\n                    //         }                        }\r\n                    //     labelBlock.string = selectedValue.toString();\r\n\r\n                    // }\r\n\r\n\r\n"]}