{"version":3,"sources":["file:///D:/gameCocos/SudokuMain2/assets/Script/GameController.ts"],"names":["runScene","arg0","Error","loadScene","_decorator","Component","Node","VerticalTextAlignment","Label","Vec3","Color","Sprite","Button","director","AudioClip","AudioSource","Slider","SudokuCreator","GameView","ccclass","property","GameController","selectedNode","puzzleGame","solutionGame","redNumber","difficultyLevel","timeElapsed","timeBestArr","onComplete","start","Infinity","bestscore","localStorage","getItem","parsedBestScore","JSON","parse","i","length","console","log","onLoad","levelPanel","active","startGamePlayer","gameView","StartGame","volumeStart","play","updateTimer","timerLabel","string","volumeGameSetting","bgMain","getComponent","volume","settingVolumeBg","progress","displayVolumeSetting","settingNode","pause","volumeGameEffect","volumeLose","getVolume","setVolume","settingVolumeEffect","volumeWinGame","volumeSelectNode","rePlayGame","continueGame","resume","displayLevelPanel","easyLevelGame","createPuzzleBoard","bgNodeValue","node","schedule","levelLabel","mediumLevelGame","hardLevelGame","sudokuCreator","childMatrixWidth","boardData","createSudoku","puzzle","push","solution","emtyNode","value","j","nodeSudoku","setPosition","boardNode","addChild","labelBlock","addComponent","toString","color","BLACK","on","EventType","TOUCH_END","nodeNum","labelValue","verticalAlign","CENTER","parent","position","Math","floor","numberLabels","selectedValue","parseInt","isNaN","x","y","solutionValue","isCorrect","RED","playerFault","gameOver","BLUE","setItem","stringify","winGame"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, VerticalTextAlignment, Label, Vec3, Color, Sprite, Button, director, AudioClip, AudioSource, Slider } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { SudokuCreator } from '@algorithm.ts/sudoku';\r\nimport { GameView } from './GameView';\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n\r\n    // @property(Node)\r\n    // startGame: Node;\r\n    \r\n    @property(GameView)\r\n    gameView: GameView;\r\n    @property(Node)\r\n    boardNode: Node;\r\n\r\n    @property(Label)\r\n    numberLabels: Label[] = [];\r\n\r\n    @property(Node)\r\n    gameOver: Node;\r\n\r\n    @property(Node)\r\n    levelPanel: Node;\r\n\r\n    @property(Button)\r\n    rePlay: Button;\r\n\r\n    //LevelPanel\r\n    @property(Button)\r\n    easyLevel: Button;\r\n\r\n    @property(Button)\r\n    mediumLevel: Button;\r\n\r\n    @property(Button)\r\n    hardLevel: Button;\r\n\r\n    @property(Label)\r\n    playerFault: Label;\r\n\r\n    @property(Sprite)\r\n    bgNodeValue: Sprite;\r\n    \r\n    //Audio Game\r\n\r\n    @property(AudioClip)\r\n    volumeStart: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeSelectNode: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeLose: AudioClip;\r\n\r\n    @property(AudioClip)\r\n    volumeWinGame: AudioClip;\r\n\r\n    @property(Sprite)\r\n    bgMain: Sprite;\r\n\r\n    @property(Button)\r\n    settingVolumeAll: Slider;\r\n\r\n    @property(Node)\r\n    settingNode: Node;\r\n\r\n    @property(Slider)\r\n    settingVolumeBg: Slider;\r\n\r\n    @property(Slider)\r\n    settingVolumeEffect: Slider;\r\n\r\n    @property(Label)\r\n    timerLabel: Label = null;\r\n\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Node)\r\n    winGame: Node;\r\n\r\n    @property(Label)\r\n    bestTime: Label;\r\n\r\n    selectedNode: Node = null;\r\n    puzzleGame: number[] = [];\r\n    solutionGame: number[] = [];\r\n    redNumber: number = 0;\r\n    difficultyLevel: number;\r\n    timeElapsed: number = 0; \r\n    timeBestArr: number[] = [];    \r\n    onComplete: () => void;\r\n    start() {\r\n        // let bestscore=localStorage.getItem('bestTime');\r\n        // if(bestscore){\r\n        //    this.timeBestArr=JSON.parse(bestscore);\r\n        //    this.bestTime.string='bestTime: ' +(Math.min(...this.timeBestArr))\r\n        // }\r\n        this.timeBestArr = [Infinity, Infinity, Infinity];\r\n        const bestscore = localStorage.getItem('bestTime');\r\n        if (bestscore) {\r\n            const parsedBestScore = JSON.parse(bestscore);\r\n            for (let i = 0; i < 3 && i < parsedBestScore.length; i++) {\r\n            this.timeBestArr[i] = parsedBestScore[i];\r\n            }\r\n        }\r\n        console.log(this.timeBestArr)\r\n    }\r\n    onLoad() {\r\n        this.levelPanel.active = true;\r\n        //this.createPuzzleBoard();\r\n        console.log(this.puzzleGame)\r\n        console.log(this.solutionGame)\r\n    }\r\n    startGamePlayer(){\r\n        this.gameView.StartGame.active = false;\r\n        this.volumeStart.play();\r\n    }\r\n    updateTimer() {\r\n        this.timeElapsed++;\r\n        this.timerLabel.string = `Thời gian : ${this.timeElapsed} giây`;\r\n    }\r\n    volumeGameSetting(){\r\n        this.bgMain.getComponent(AudioSource).volume = this.settingVolumeBg.progress;\r\n    }\r\n    displayVolumeSetting(){\r\n        this.settingNode.active = true;\r\n        director.pause();\r\n    }\r\n    volumeGameEffect(){\r\n        this.volumeLose.getVolume();\r\n        this.volumeLose.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeWinGame.getVolume();\r\n        this.volumeWinGame.setVolume(this.settingVolumeEffect.progress);\r\n        this.volumeSelectNode.getVolume();\r\n        this.volumeSelectNode.setVolume(this.settingVolumeEffect.progress);\r\n    }\r\n    rePlayGame(){\r\n        director.loadScene(\"MainGame\");\r\n    }\r\n    continueGame(){\r\n        director.resume();\r\n        this.settingNode.active = false;\r\n    }\r\n    displayLevelPanel(){\r\n        this.levelPanel.active = true;\r\n    }\r\n    \r\n    //levelFunction\r\n    easyLevelGame() {\r\n        this.difficultyLevel = 0.1;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : DỄ\"\r\n\r\n    }\r\n    mediumLevelGame() {\r\n        this.difficultyLevel = 0.2;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1);\r\n        this.levelLabel.string = \"Độ khó : TRUNG BÌNH\"\r\n\r\n    }\r\n    hardLevelGame() {\r\n        this.difficultyLevel = 0.3;\r\n        this.createPuzzleBoard();\r\n        this.levelPanel.active = false;\r\n        this.bgNodeValue.node.active = true;\r\n        this.schedule(this.updateTimer, 1); \r\n        this.levelLabel.string = \"Độ khó : KHÓ\"\r\n    }\r\n    createPuzzleBoard(){\r\n\r\n        let sudokuCreator = new SudokuCreator({childMatrixWidth: 3});\r\n        let boardData = sudokuCreator.createSudoku(this.difficultyLevel);\r\n\r\n        for (let i = 0; i < boardData.puzzle.length; i++) {\r\n            this.puzzleGame.push(boardData.puzzle[i] + 1);\r\n        }\r\n        for (let i = 0; i < boardData.solution.length; i++) {\r\n            this.solutionGame.push(boardData.solution[i] + 1);\r\n        }\r\n\r\n        let emtyNode = 0;\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n\r\n                const value = this.puzzleGame[i*9 + j];\r\n                const nodeSudoku = new Node(\"ValueGame\");\r\n\r\n                nodeSudoku.setPosition(i * 55, j * 55);\r\n                this.boardNode.addChild(nodeSudoku);\r\n                \r\n                const labelBlock = nodeSudoku.addComponent(Label);\r\n                labelBlock.string = value === 0 ? \"    \" : value.toString();\r\n                labelBlock.color = Color.BLACK;\r\n\r\n                if (value === 0) {\r\n                    emtyNode++;\r\n                }\r\n\r\n                nodeSudoku.on(Node.EventType.TOUCH_END, () => {\r\n                    if (value === 0) {\r\n                      this.selectedNode = nodeSudoku;\r\n                      labelBlock.string = \"-\";\r\n                    }\r\n                });\r\n\r\n\r\n            }\r\n            const nodeNum = new Node(\"NumberValueLabel\");\r\n            const labelValue = nodeNum.addComponent(Label);\r\n            labelValue.string = `  ${i + 1}  `;\r\n            labelValue.color = Color.BLACK;\r\n\r\n            labelValue.verticalAlign = VerticalTextAlignment.CENTER;\r\n            nodeNum.parent = this.node;\r\n            nodeNum.position = new Vec3(i % 3 * 100 + 180, Math.floor(i / 3) * -60, 0);\r\n            this.numberLabels.push(labelValue);\r\n            nodeNum.on(Node.EventType.TOUCH_END, () => {\r\n                if (this.selectedNode) {\r\n                    const selectedValue = parseInt(labelValue.string);\r\n                    if (!isNaN(selectedValue)) {\r\n                        this.volumeSelectNode.play();\r\n                        const i = Math.floor(this.selectedNode.position.x / 55);\r\n                        const j = Math.floor(this.selectedNode.position.y / 55);\r\n                        const position = i * 9 + j;\r\n                        const solutionValue = this.solutionGame[position];\r\n                        const isCorrect = selectedValue === solutionValue;\r\n                        console.log(isCorrect);\r\n\r\n                        const labelBlock = this.selectedNode.getComponent(Label);\r\n\r\n                        if (!isCorrect) {\r\n                            labelBlock.color = Color.RED;\r\n                            this.redNumber++;\r\n                            this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                            this.playerFault.node.active = true;\r\n                            if (this.redNumber === 4) {\r\n                                console.log(\"thua rồi nhé !!!\");\r\n                                this.gameOver.active = true;\r\n                                this.playerFault.string = `Lỗi 3/3`;\r\n                                this.volumeLose.play();\r\n                            }\r\n                        } else {\r\n                            labelBlock.color = Color.BLUE;\r\n                            emtyNode -= 1;\r\n                            console.log(emtyNode);\r\n                            if (emtyNode === 0){\r\n                                console.log(\"winner\");\r\n                                this.timeBestArr.push(this.timeElapsed);\r\n                                localStorage.setItem('bestTime', JSON.stringify(this.timeBestArr));\r\n                                this.winGame.active = true;  \r\n                                this.volumeWinGame.play();                            \r\n                            }                      \r\n                        }\r\n                        labelBlock.string = selectedValue.toString();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function runScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n\r\nexport function loadScene(arg0: string) {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n// if (!isNaN(selectedValue)) {\r\n                    //     this.volumeSelectNode.play();\r\n                    //     const i = Math.floor(this.selectedNode.position.x / 55);\r\n                    //     const j = Math.floor(this.selectedNode.position.y / 55);\r\n                    //     const position = i * 9 + j;\r\n                    //     const rowStart = Math.floor(i / 3) * 3;\r\n                    //     const colStart = Math.floor(j / 3) * 3;\r\n                    //     let isCorrect = true;\r\n                    \r\n                    //     // Check row\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== j && selectedValue === this.puzzleGame[i*9 + k]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check column\r\n                    //     for (let k = 0; k < 9; k++) {\r\n                    //         if (k !== i && selectedValue === this.puzzleGame[k*9 + j]) {\r\n                    //             isCorrect = false;\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     // Check 3x3\r\n                    //     for (let row = 0; row < 3; row++) {\r\n                    //         for (let col = 0; col < 3; col++) {\r\n                    //             const r = rowStart + row;\r\n                    //             const c = colStart + col;\r\n                    //             if ((r !== i || c !== j) && selectedValue === this.puzzleGame[r*9 + c]) {\r\n                    //                 isCorrect = false;\r\n                    //                 break;\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    \r\n                    //     console.log(isCorrect);\r\n                    \r\n                    //     const labelBlock = this.selectedNode.getComponent(Label);\r\n                    //     if (!isCorrect) {\r\n                    //         labelBlock.color = Color.RED;\r\n                    //         this.redNumber++;\r\n                    //         this.playerFault.string = `Lỗi: ${this.redNumber}/3`\r\n                    //         this.playerFault.node.active = true;\r\n                    //         if (this.redNumber === 4) {\r\n                    //             console.log(\"thua rồi nhé !!!\");\r\n                    //             this.gameOver.active = true;\r\n                    //             this.playerFault.string = `Lỗi 3/3`;\r\n                    //             this.volumeLose.play();\r\n                    //         }\r\n                    //         emtyNode++;\r\n                    //     } else {\r\n                    //         labelBlock.color = Color.BLUE;\r\n                    //         emtyNode--;\r\n                    //         console.log(emtyNode);\r\n                    //         if (emtyNode === 0){\r\n                    //             console.log(\"winner\");\r\n                    //             this.timeBestArr.push(this.timeElapsed);\r\n                    //             localStorage.setItem('scores', JSON.stringify(this.timeBestArr));\r\n                    //             let bestTime = Math.max(...this.timeBestArr);\r\n                    //             console.log(bestTime);\r\n                    //         }                        }\r\n                    //     labelBlock.string = selectedValue.toString();\r\n\r\n                    // }\r\n\r\n"]}